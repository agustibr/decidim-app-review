{"ast":null,"code":"/* eslint-disable require-jsdoc */\nimport getCoordinateInputName from \"./coordinate_input\";\n/**\n * You can use this method to \"attach\" front-end geocoding to any forms in the\n * front-end which have address fields with geocoding autocompletion\n * functionality already applied to them.\n *\n * To learn more about the front-end geocoding autocompletion, please refer to\n * the maps documentation at: /docs/customization/maps.md.\n *\n * When the geocoding autocompletion finishes, most of the times, its results\n * will also contain the geocoordinate information for the selected address.\n * This method allows you to pass these coordinates (latitude and longitude)\n * to the same front-end form where the geocoding autocompletion address field\n * is located at (which is the $input you pass to this method). The latitude\n * and longitude coordinates will be added or \"attached\" to the form once the\n * user selects one of the suggested addresses.\n *\n * Therefore, if there was the following geocoding autocompletion field at\n * your form:\n *   <input\n *     id=\"record_address\"\n *     type=\"text\"\n *     name=\"record[address]\"\n *     data-decidim-geocoding=\"{&quot;url&quot;:&quot;https://photon.example.org/api/&quot;}\"\n *   />\n *\n * You would then \"attach\" the geocoding result coordinates to the same form\n * where this input is at as follows:\n *   $(document).ready(function() {\n *     window.Decidim.attachGeocoding($(\"#record_address\"));\n *   });\n *\n * Now, after the user selects one of the suggested geocoding autocompletion\n * addresses and the geocoding autocompletion API provides the coordinates in\n * the results, you would have the following fields automatically generated\n * to your form:\n *   <input id=\"record_address\" type=\"text\" name=\"record[address]\" value=\"Selected address, 00210, City\" ... />\n *   <input id=\"record_latitude\" type=\"hidden\" name=\"record[latitude]\" value=\"1.123\" />\n *   <input id=\"record_longitude\" type=\"hidden\" name=\"record[longitude]\" value=\"2.234\" />\n *\n * If you would not do the attachment, these hidden longitude and latitude\n * fields would not be generated and the geocoding would have to happen at the\n * server-side when the form is submitted. The problem with that approach\n * would be that the server-side address geocoding could potentially result in\n * different coordinates than what the user actually selected in the front-end\n * because the autocompletion API can return different coordinates than the\n * geocoding API. Another reason is to avoid unnecessary calls to the\n * geocoding API as the front-end geocoding suggestion already returned the\n * coordinate values we need.\n *\n * @param {jQuery} $input The input jQuery element for the geocoded address\n *   field.\n * @param {Object} options (optional) Extra options if you want to customize\n *   the latitude and longitude element IDs or names from the default.\n * @param {function} callback (optional) Callback to run when updating the coordinates values\n * @returns {void}\n */\n\nexport default function attachGeocoding($input, options, callback) {\n  var attachOptions = $.extend({}, options);\n  var inputIdParts = $input.attr(\"id\").split(\"_\");\n  inputIdParts.pop();\n  var idPrefix = \"\".concat(inputIdParts.join(\"_\"));\n  var latitudeName = \"latitude\";\n  var longitudeName = \"longitude\";\n\n  if ($input.length > 0) {\n    latitudeName = getCoordinateInputName(\"latitude\", $input, attachOptions);\n    longitudeName = getCoordinateInputName(\"longitude\", $input, attachOptions);\n  }\n\n  var config = $.extend({\n    latitudeId: \"\".concat(idPrefix, \"_latitude\"),\n    longitudeId: \"\".concat(idPrefix, \"_longitude\"),\n    latitudeName: latitudeName,\n    longitudeName: longitudeName\n  }, options);\n  var geocoded = false;\n\n  var createCoordinateFields = function createCoordinateFields() {\n    var $latitude = $(\"#\".concat(config.latitudeId));\n\n    if ($latitude.length < 1) {\n      $latitude = $(\"<input type=\\\"hidden\\\" name=\\\"\".concat(config.latitudeName, \"\\\" id=\\\"\").concat(config.latitudeId, \"\\\" />\"));\n      $input.after($latitude);\n    }\n\n    var $longitude = $(\"#\".concat(config.longitudeId));\n\n    if ($longitude.length < 1) {\n      $longitude = $(\"<input type=\\\"hidden\\\" name=\\\"\".concat(config.longitudeName, \"\\\" id=\\\"\").concat(config.longitudeId, \"\\\" />\"));\n      $input.after($longitude);\n    }\n  };\n\n  var clearCoordinateFields = function clearCoordinateFields() {\n    if (geocoded) {\n      return;\n    }\n\n    $(\"#\".concat(config.latitudeId)).val(\"\").removeAttr(\"value\");\n    $(\"#\".concat(config.longitudeId)).val(\"\").removeAttr(\"value\");\n  };\n\n  var setCoordinates = function setCoordinates(coordinates) {\n    createCoordinateFields();\n    $(\"#\".concat(config.latitudeId)).val(coordinates[0]).attr(\"value\", coordinates[0]);\n    $(\"#\".concat(config.longitudeId)).val(coordinates[1]).attr(\"value\", coordinates[1]);\n  }; // When the user changes the value of the coordinate field without selecting\n  // any of the geocoding autocomplete results, clear the current latitude and\n  // longitude values to let the backend do the geocoding. Once a geocoding\n  // autocomplete value has been selected, assume the user just wants to\n  // refine the address formatting without changing the location point value.\n  // If they want, they can still modify the point in the next step of the\n  // proposal creation/editing.\n\n\n  $input.on(\"change.decidim\", function () {\n    clearCoordinateFields();\n  }); // When we receive the geocoding event on the field, update the coordinate\n  // values.\n\n  $input.on(\"geocoder-suggest-coordinates.decidim\", function (_ev, coordinates) {\n    setCoordinates(coordinates);\n    geocoded = true;\n    callback(coordinates);\n  }); // Set the initial values if the field defines the coordinates\n\n  var coordinates = \"\".concat($input.data(\"coordinates\")).split(\",\").map(parseFloat);\n\n  if (Array.isArray(coordinates) && coordinates.length === 2) {\n    setCoordinates(coordinates);\n  }\n}","map":{"version":3,"mappings":"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","names":["getCoordinateInputName","attachGeocoding","$input","options","callback","attachOptions","$","extend","inputIdParts","attr","split","pop","idPrefix","join","latitudeName","longitudeName","length","config","latitudeId","longitudeId","geocoded","createCoordinateFields","$latitude","after","$longitude","clearCoordinateFields","val","removeAttr","setCoordinates","coordinates","on","_ev","data","map","parseFloat","Array","isArray"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/geocoding/attach_input.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\nimport getCoordinateInputName from \"./coordinate_input\"\n\n/**\n * You can use this method to \"attach\" front-end geocoding to any forms in the\n * front-end which have address fields with geocoding autocompletion\n * functionality already applied to them.\n *\n * To learn more about the front-end geocoding autocompletion, please refer to\n * the maps documentation at: /docs/customization/maps.md.\n *\n * When the geocoding autocompletion finishes, most of the times, its results\n * will also contain the geocoordinate information for the selected address.\n * This method allows you to pass these coordinates (latitude and longitude)\n * to the same front-end form where the geocoding autocompletion address field\n * is located at (which is the $input you pass to this method). The latitude\n * and longitude coordinates will be added or \"attached\" to the form once the\n * user selects one of the suggested addresses.\n *\n * Therefore, if there was the following geocoding autocompletion field at\n * your form:\n *   <input\n *     id=\"record_address\"\n *     type=\"text\"\n *     name=\"record[address]\"\n *     data-decidim-geocoding=\"{&quot;url&quot;:&quot;https://photon.example.org/api/&quot;}\"\n *   />\n *\n * You would then \"attach\" the geocoding result coordinates to the same form\n * where this input is at as follows:\n *   $(document).ready(function() {\n *     window.Decidim.attachGeocoding($(\"#record_address\"));\n *   });\n *\n * Now, after the user selects one of the suggested geocoding autocompletion\n * addresses and the geocoding autocompletion API provides the coordinates in\n * the results, you would have the following fields automatically generated\n * to your form:\n *   <input id=\"record_address\" type=\"text\" name=\"record[address]\" value=\"Selected address, 00210, City\" ... />\n *   <input id=\"record_latitude\" type=\"hidden\" name=\"record[latitude]\" value=\"1.123\" />\n *   <input id=\"record_longitude\" type=\"hidden\" name=\"record[longitude]\" value=\"2.234\" />\n *\n * If you would not do the attachment, these hidden longitude and latitude\n * fields would not be generated and the geocoding would have to happen at the\n * server-side when the form is submitted. The problem with that approach\n * would be that the server-side address geocoding could potentially result in\n * different coordinates than what the user actually selected in the front-end\n * because the autocompletion API can return different coordinates than the\n * geocoding API. Another reason is to avoid unnecessary calls to the\n * geocoding API as the front-end geocoding suggestion already returned the\n * coordinate values we need.\n *\n * @param {jQuery} $input The input jQuery element for the geocoded address\n *   field.\n * @param {Object} options (optional) Extra options if you want to customize\n *   the latitude and longitude element IDs or names from the default.\n * @param {function} callback (optional) Callback to run when updating the coordinates values\n * @returns {void}\n */\n\nexport default function attachGeocoding($input, options, callback) {\n  const attachOptions = $.extend({}, options);\n  const inputIdParts = $input.attr(\"id\").split(\"_\");\n  inputIdParts.pop();\n\n  const idPrefix = `${inputIdParts.join(\"_\")}`;\n\n  let latitudeName = \"latitude\";\n  let longitudeName = \"longitude\";\n\n  if ($input.length > 0) {\n    latitudeName = getCoordinateInputName(\"latitude\", $input, attachOptions);\n    longitudeName = getCoordinateInputName(\"longitude\", $input, attachOptions);\n  }\n\n  const config = $.extend({\n    latitudeId: `${idPrefix}_latitude`,\n    longitudeId: `${idPrefix}_longitude`,\n    latitudeName: latitudeName,\n    longitudeName: longitudeName\n  }, options);\n  let geocoded = false;\n\n  const createCoordinateFields = () => {\n    let $latitude = $(`#${config.latitudeId}`);\n    if ($latitude.length < 1) {\n      $latitude = $(`<input type=\"hidden\" name=\"${config.latitudeName}\" id=\"${config.latitudeId}\" />`);\n      $input.after($latitude);\n    }\n\n    let $longitude = $(`#${config.longitudeId}`);\n    if ($longitude.length < 1) {\n      $longitude = $(`<input type=\"hidden\" name=\"${config.longitudeName}\" id=\"${config.longitudeId}\" />`);\n      $input.after($longitude);\n    }\n  }\n  const clearCoordinateFields = () => {\n    if (geocoded) {\n      return;\n    }\n\n    $(`#${config.latitudeId}`).val(\"\").removeAttr(\"value\");\n    $(`#${config.longitudeId}`).val(\"\").removeAttr(\"value\");\n  };\n  const setCoordinates = (coordinates) => {\n    createCoordinateFields();\n\n    $(`#${config.latitudeId}`).val(coordinates[0]).attr(\"value\", coordinates[0]);\n    $(`#${config.longitudeId}`).val(coordinates[1]).attr(\"value\", coordinates[1]);\n  }\n\n  // When the user changes the value of the coordinate field without selecting\n  // any of the geocoding autocomplete results, clear the current latitude and\n  // longitude values to let the backend do the geocoding. Once a geocoding\n  // autocomplete value has been selected, assume the user just wants to\n  // refine the address formatting without changing the location point value.\n  // If they want, they can still modify the point in the next step of the\n  // proposal creation/editing.\n  $input.on(\"change.decidim\", () => {\n    clearCoordinateFields();\n  });\n\n  // When we receive the geocoding event on the field, update the coordinate\n  // values.\n  $input.on(\"geocoder-suggest-coordinates.decidim\", (_ev, coordinates) => {\n    setCoordinates(coordinates);\n    geocoded = true;\n    callback(coordinates)\n  });\n\n  // Set the initial values if the field defines the coordinates\n  const coordinates = `${$input.data(\"coordinates\")}`.split(\",\").map(parseFloat);\n  if (Array.isArray(coordinates) && coordinates.length === 2) {\n    setCoordinates(coordinates);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}