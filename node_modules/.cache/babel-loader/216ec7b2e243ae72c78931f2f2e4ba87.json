{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\n * CheckBoxesTree component.\n */\n\n\nvar CheckBoxesTree = /*#__PURE__*/function () {\n  function CheckBoxesTree() {\n    var _this = this;\n\n    _classCallCheck(this, CheckBoxesTree);\n\n    this.checkboxesTree = document.querySelectorAll(\"[data-checkboxes-tree]\");\n\n    if (!this.checkboxesTree) {\n      return;\n    }\n\n    this.globalChecks = document.querySelectorAll(\"[data-global-checkbox] input\");\n    this.globalChecks.forEach(function (global) {\n      if (global.value === \"\") {\n        global.classList.add(\"ignore-filter\");\n      }\n    });\n    this.checkGlobalCheck(); // Event listeners\n\n    this.checkboxesTree.forEach(function (input) {\n      return input.addEventListener(\"click\", function (event) {\n        return _this.checkTheCheckBoxes(event.target);\n      });\n    });\n    document.querySelectorAll(\"[data-children-checkbox] input\").forEach(function (input) {\n      input.addEventListener(\"change\", function (event) {\n        return _this.checkTheCheckParent(event.target);\n      });\n    }); // Review parent checkboxes on initial load\n\n    document.querySelectorAll(\"[data-children-checkbox] input\").forEach(function (input) {\n      _this.checkTheCheckParent(input);\n    });\n  }\n  /**\n   * Set checkboxes as checked if included in given values\n   * @public\n   * @param {Array} checkboxes - array of checkboxs to check\n   * @param {Array} values - values of checkboxes that should be checked\n   * @returns {Void} - Returns nothing.\n   */\n\n\n  _createClass(CheckBoxesTree, [{\n    key: \"updateChecked\",\n    value: function updateChecked(checkboxes, values) {\n      var _this2 = this;\n\n      checkboxes.each(function (index, checkbox) {\n        if (checkbox.value === \"\" && values.length === 1 || checkbox.value !== \"\" && values.includes(checkbox.value)) {\n          checkbox.checked = true;\n\n          _this2.checkTheCheckBoxes(checkbox);\n\n          _this2.checkTheCheckParent(checkbox);\n        }\n      });\n    }\n    /**\n     * Set the container form(s) for the component, to disable ignored filters before submitting them\n     * @public\n     * @param {query} theForm - form or forms where the component will be used\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"setContainerForm\",\n    value: function setContainerForm(theForm) {\n      theForm.on(\"submit ajax:before\", function () {\n        theForm.find(\".ignore-filters input, input.ignore-filter\").each(function (idx, elem) {\n          elem.disabled = true;\n        });\n      });\n      theForm.on(\"ajax:send\", function () {\n        theForm.find(\".ignore-filters input, input.ignore-filter\").each(function (idx, elem) {\n          elem.disabled = false;\n        });\n      });\n    }\n    /**\n     * Handles the click action on any checkbox.\n     * @private\n     * @param {Input} target - the input that has been checked\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"checkTheCheckBoxes\",\n    value: function checkTheCheckBoxes(target) {\n      // Quis custodiet ipsos custodes?\n      var targetChecks = target.dataset.checkboxesTree;\n      var checkStatus = target.checked;\n      var allChecks = document.querySelectorAll(\"#\".concat(targetChecks, \" input[type='checkbox']\"));\n      allChecks.forEach(function (input) {\n        input.checked = checkStatus;\n        input.indeterminate = false;\n        input.classList.add(\"ignore-filter\");\n      });\n    }\n    /**\n     * Update global checkboxes state when the current selection changes\n     * @private\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"checkGlobalCheck\",\n    value: function checkGlobalCheck() {\n      this.globalChecks.forEach(function (global) {\n        var checksContext = global.dataset.checkboxesTree;\n        var totalInputs = document.querySelectorAll(\"#\".concat(checksContext, \" input[type='checkbox']\"));\n        var checkedInputs = document.querySelectorAll(\"#\".concat(checksContext, \" input[type='checkbox']:checked\"));\n        var indeterminateInputs = Array.from(totalInputs).filter(function (checkbox) {\n          return checkbox.indeterminate;\n        });\n\n        if (checkedInputs.length === 0 && indeterminateInputs.length === 0) {\n          global.checked = false;\n          global.indeterminate = false;\n        } else if (checkedInputs.length === totalInputs.length && indeterminateInputs.length === 0) {\n          global.checked = true;\n          global.indeterminate = false;\n        } else {\n          global.checked = true;\n          global.indeterminate = true;\n        }\n\n        totalInputs.forEach(function (input) {\n          if (global.indeterminate && !input.indeterminate) {\n            input.classList.remove(\"ignore-filter\");\n          } else {\n            input.classList.add(\"ignore-filter\");\n          }\n\n          var subfilters = input.parentNode.parentNode.nextElementSibling;\n\n          if (subfilters && subfilters.classList.contains(\"filters__subfilters\")) {\n            if (input.indeterminate) {\n              subfilters.classList.remove(\"ignore-filters\");\n            } else {\n              subfilters.classList.add(\"ignore-filters\");\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Update children checkboxes state when the current selection changes\n     * @private\n     * @param {Input} input - the checkbox to check its parent\n     * @returns {Void} - Returns nothing.\n     */\n\n  }, {\n    key: \"checkTheCheckParent\",\n    value: function checkTheCheckParent(input) {\n      var checkBoxContext = $(input).parents(\".filters__subfilters\").attr(\"id\");\n\n      if (!checkBoxContext) {\n        this.checkGlobalCheck();\n        return;\n      }\n\n      var parentCheck = document.querySelector(\"[data-checkboxes-tree=\".concat(checkBoxContext, \"]\"));\n      var totalCheckSiblings = document.querySelectorAll(\"#\".concat(checkBoxContext, \" > div > [data-children-checkbox] > input, #\").concat(checkBoxContext, \" > [data-children-checkbox] > input\"));\n      var checkedSiblings = document.querySelectorAll(\"#\".concat(checkBoxContext, \" > div > [data-children-checkbox] > input:checked, #\").concat(checkBoxContext, \" > [data-children-checkbox] > input:checked\"));\n      var indeterminateSiblings = Array.from(totalCheckSiblings).filter(function (checkbox) {\n        return checkbox.indeterminate;\n      });\n\n      if (checkedSiblings.length === 0 && indeterminateSiblings.length === 0) {\n        parentCheck.checked = false;\n        parentCheck.indeterminate = false;\n      } else if (checkedSiblings.length === totalCheckSiblings.length && indeterminateSiblings.length === 0) {\n        parentCheck.checked = true;\n        parentCheck.indeterminate = false;\n      } else {\n        parentCheck.checked = true;\n        parentCheck.indeterminate = true;\n      }\n\n      totalCheckSiblings.forEach(function (sibling) {\n        if (parent.indeterminate && !sibling.indeterminate) {\n          sibling.classList.remove(\"ignore-filter\");\n        } else {\n          sibling.classList.add(\"ignore-filter\");\n        }\n\n        var subfilters = sibling.parentNode.parentNode.nextElementSibling;\n\n        if (subfilters && subfilters.classList.contains(\"filters__subfilters\")) {\n          if (sibling.indeterminate) {\n            subfilters.classList.remove(\"ignore-filters\");\n          } else {\n            subfilters.classList.add(\"ignore-filters\");\n          }\n        }\n      });\n      this.checkTheCheckParent(parentCheck);\n    }\n  }]);\n\n  return CheckBoxesTree;\n}();\n\nexport { CheckBoxesTree as default };","map":{"version":3,"mappings":"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","names":["CheckBoxesTree","_classCallCheck","checkboxesTree","document","querySelectorAll","globalChecks","forEach","global","value","classList","add","checkGlobalCheck","input","addEventListener","event","_this","checkTheCheckBoxes","target","checkTheCheckParent","checkboxes","values","each","index","checkbox","length","includes","checked","_this2","theForm","on","find","idx","elem","disabled","targetChecks","dataset","checkStatus","allChecks","indeterminate","checksContext","totalInputs","checkedInputs","indeterminateInputs","Array","from","filter","remove","subfilters","parentNode","nextElementSibling","contains","checkBoxContext","$","parents","attr","parentCheck","querySelector","totalCheckSiblings","checkedSiblings","indeterminateSiblings","sibling","parent"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/check_boxes_tree.js"],"sourcesContent":["/**\n * CheckBoxesTree component.\n */\nexport default class CheckBoxesTree {\n  constructor() {\n    this.checkboxesTree = document.querySelectorAll(\"[data-checkboxes-tree]\");\n    if (!this.checkboxesTree) {\n      return;\n    }\n\n    this.globalChecks = document.querySelectorAll(\"[data-global-checkbox] input\");\n    this.globalChecks.forEach((global) => {\n      if (global.value === \"\") {\n        global.classList.add(\"ignore-filter\")\n      }\n    });\n    this.checkGlobalCheck();\n\n    // Event listeners\n    this.checkboxesTree.forEach((input) => input.addEventListener(\"click\", (event) => this.checkTheCheckBoxes(event.target)));\n    document.querySelectorAll(\"[data-children-checkbox] input\").forEach((input) => {\n      input.addEventListener(\"change\", (event) => this.checkTheCheckParent(event.target));\n    });\n\n    // Review parent checkboxes on initial load\n    document.querySelectorAll(\"[data-children-checkbox] input\").forEach((input) => {\n      this.checkTheCheckParent(input);\n    });\n  }\n\n  /**\n   * Set checkboxes as checked if included in given values\n   * @public\n   * @param {Array} checkboxes - array of checkboxs to check\n   * @param {Array} values - values of checkboxes that should be checked\n   * @returns {Void} - Returns nothing.\n   */\n  updateChecked(checkboxes, values) {\n    checkboxes.each((index, checkbox) => {\n      if ((checkbox.value === \"\" && values.length === 1) || (checkbox.value !== \"\" && values.includes(checkbox.value))) {\n        checkbox.checked = true;\n        this.checkTheCheckBoxes(checkbox);\n        this.checkTheCheckParent(checkbox);\n      }\n    });\n  }\n\n  /**\n   * Set the container form(s) for the component, to disable ignored filters before submitting them\n   * @public\n   * @param {query} theForm - form or forms where the component will be used\n   * @returns {Void} - Returns nothing.\n   */\n  setContainerForm(theForm) {\n    theForm.on(\"submit ajax:before\", () => {\n      theForm.find(\".ignore-filters input, input.ignore-filter\").each((idx, elem) => {\n        elem.disabled = true;\n      });\n    });\n\n    theForm.on(\"ajax:send\", () => {\n      theForm.find(\".ignore-filters input, input.ignore-filter\").each((idx, elem) => {\n        elem.disabled = false;\n      });\n    });\n  }\n\n  /**\n   * Handles the click action on any checkbox.\n   * @private\n   * @param {Input} target - the input that has been checked\n   * @returns {Void} - Returns nothing.\n   */\n  checkTheCheckBoxes(target) {\n    // Quis custodiet ipsos custodes?\n    const targetChecks = target.dataset.checkboxesTree;\n    const checkStatus = target.checked;\n    const allChecks = document.querySelectorAll(`#${targetChecks} input[type='checkbox']`);\n\n    allChecks.forEach((input) => {\n      input.checked = checkStatus;\n      input.indeterminate = false;\n      input.classList.add(\"ignore-filter\");\n    });\n  }\n\n  /**\n   * Update global checkboxes state when the current selection changes\n   * @private\n   * @returns {Void} - Returns nothing.\n   */\n  checkGlobalCheck() {\n    this.globalChecks.forEach((global) => {\n      const checksContext = global.dataset.checkboxesTree;\n      const totalInputs = document.querySelectorAll(\n        `#${checksContext} input[type='checkbox']`\n      );\n      const checkedInputs = document.querySelectorAll(\n        `#${checksContext} input[type='checkbox']:checked`\n      );\n      const indeterminateInputs = Array.from(totalInputs).filter((checkbox) => checkbox.indeterminate)\n\n      if (checkedInputs.length === 0 && indeterminateInputs.length === 0) {\n        global.checked = false;\n        global.indeterminate = false;\n      } else if (checkedInputs.length === totalInputs.length && indeterminateInputs.length === 0) {\n        global.checked = true;\n        global.indeterminate = false;\n      } else {\n        global.checked = true;\n        global.indeterminate = true;\n      }\n\n      totalInputs.forEach((input) => {\n        if (global.indeterminate && !input.indeterminate) {\n          input.classList.remove(\"ignore-filter\");\n        } else {\n          input.classList.add(\"ignore-filter\");\n        }\n        const subfilters = input.parentNode.parentNode.nextElementSibling;\n        if (subfilters && subfilters.classList.contains(\"filters__subfilters\")) {\n          if (input.indeterminate) {\n            subfilters.classList.remove(\"ignore-filters\");\n          } else {\n            subfilters.classList.add(\"ignore-filters\");\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Update children checkboxes state when the current selection changes\n   * @private\n   * @param {Input} input - the checkbox to check its parent\n   * @returns {Void} - Returns nothing.\n   */\n  checkTheCheckParent(input) {\n    const checkBoxContext = $(input).parents(\".filters__subfilters\").attr(\"id\");\n    if (!checkBoxContext) {\n      this.checkGlobalCheck();\n      return;\n    }\n\n    const parentCheck = document.querySelector(\n      `[data-checkboxes-tree=${checkBoxContext}]`\n    );\n    const totalCheckSiblings = document.querySelectorAll(\n      `#${checkBoxContext} > div > [data-children-checkbox] > input, #${checkBoxContext} > [data-children-checkbox] > input`\n    );\n    const checkedSiblings = document.querySelectorAll(\n      `#${checkBoxContext} > div > [data-children-checkbox] > input:checked, #${checkBoxContext} > [data-children-checkbox] > input:checked`\n    );\n    const indeterminateSiblings = Array.from(totalCheckSiblings).filter((checkbox) => checkbox.indeterminate)\n\n    if (checkedSiblings.length === 0 && indeterminateSiblings.length === 0) {\n      parentCheck.checked = false;\n      parentCheck.indeterminate = false;\n    } else if (checkedSiblings.length === totalCheckSiblings.length && indeterminateSiblings.length === 0) {\n      parentCheck.checked = true;\n      parentCheck.indeterminate = false;\n    } else {\n      parentCheck.checked = true;\n      parentCheck.indeterminate = true;\n    }\n\n    totalCheckSiblings.forEach((sibling) => {\n      if (parent.indeterminate && !sibling.indeterminate) {\n        sibling.classList.remove(\"ignore-filter\");\n      } else {\n        sibling.classList.add(\"ignore-filter\");\n      }\n      const subfilters = sibling.parentNode.parentNode.nextElementSibling;\n      if (subfilters && subfilters.classList.contains(\"filters__subfilters\")) {\n        if (sibling.indeterminate) {\n          subfilters.classList.remove(\"ignore-filters\");\n        } else {\n          subfilters.classList.add(\"ignore-filters\");\n        }\n      }\n    });\n\n    this.checkTheCheckParent(parentCheck);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}