{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n\n/**\n * A plain Javascript component that handles questions from polls in meetings:\n *   - fetches them via Ajax\n *   - enables a polling to automatically update them\n *\n * @class\n * @augments Component\n */\n// This is necessary for testing purposes\n\n\nvar $ = window.$; // Default question states\n\nvar OPEN = \"open\";\nvar CLOSED = \"closed\";\n\nvar PollComponent = /*#__PURE__*/function () {\n  function PollComponent($element, config) {\n    var $counter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, PollComponent);\n\n    this.$element = $element;\n    this.$counter = $counter;\n    this.questionsUrl = config.questionsUrl;\n    this.pollingInterval = config.pollingInterval || 5000;\n    this.mounted = false;\n    this.questions = {};\n  }\n  /**\n   * Returns if the component is mounted or not\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n\n\n  _createClass(PollComponent, [{\n    key: \"isMounted\",\n    value: function isMounted() {\n      return this.mounted;\n    }\n    /**\n     * Handles the logic for mounting the component\n     * @public\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"mountComponent\",\n    value: function mountComponent() {\n      if (this.$element.length > 0 && !this.mounted) {\n        this.mounted = true;\n\n        this._fetchQuestions();\n      }\n    }\n  }, {\n    key: \"unmountComponent\",\n    value: function unmountComponent() {\n      if (this.mounted) {\n        this.mounted = false;\n\n        this._stopPolling();\n\n        this.$element.html(\"\");\n      }\n    }\n    /**\n     * Performs the ajax call that updates the list of questions\n     * Before, stores the current questions states to apply them after the ajax call has\n     * been completed\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_fetchQuestions\",\n    value: function _fetchQuestions() {\n      var _this = this; // Store current questions state (open / closed) before overwritting them with the Ajax call\n      // response.\n\n\n      this._storeQuestionState(this.$element);\n\n      $.ajax({\n        url: this.questionsUrl,\n        method: \"GET\",\n        contentType: \"application/javascript\"\n      }).done(function () {\n        _this._updateCounter();\n\n        _this._setQuestionsState(_this.$element);\n\n        _this._pollQuestions();\n      });\n    }\n    /**\n     * Iterates over all existing questions and stores the state in an internal attribute.\n     * @private\n     * @param {jQuery} $parent - The HTML content for the questionnaire.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_storeQuestionState\",\n    value: function _storeQuestionState($parent) {\n      var _this2 = this;\n\n      $(\"[data-question]\", $parent).each(function (_i, el) {\n        var $el = $(el);\n        var questionId = $el.data(\"question\");\n\n        if ($el[0].open === true) {\n          _this2.questions[questionId] = OPEN;\n        } else {\n          _this2.questions[questionId] = CLOSED;\n        }\n      });\n    }\n    /**\n     * Initializes the states of all the questions.\n     * @private\n     * @param {jQuery} $parent - The HTML container for the questionnaire.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_setQuestionsState\",\n    value: function _setQuestionsState($parent) {\n      var _this3 = this;\n\n      $(\"[data-question]\", $parent).each(function (_i, el) {\n        _this3._setQuestionState($(el));\n      });\n    }\n    /**\n     * Initializes the state of a single question with two types of modifications:\n     *   - sets the is-new class if the question is new (doesn't exist in the internal list)\n     *   - sets the state to open if it was open in the internal list\n     * @private\n     * @param {jQuery} $el - The HTML container for the questionnaire.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_setQuestionState\",\n    value: function _setQuestionState($el) {\n      var questionId = $el.data(\"question\"); // Current question state\n\n      var state = this.questions[questionId]; // New questions have a special class\n\n      if (!state) {\n        $el.addClass(\"is-new\");\n      } else if (state === OPEN) {\n        $el.prop(OPEN, true);\n      }\n    }\n    /**\n     * Sets a timeout to poll new questions.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_pollQuestions\",\n    value: function _pollQuestions() {\n      var _this4 = this;\n\n      this._stopPolling();\n\n      this.pollTimeout = setTimeout(function () {\n        _this4._fetchQuestions();\n      }, this.pollingInterval);\n    }\n    /**\n     * Stops polling for new questions.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_stopPolling\",\n    value: function _stopPolling() {\n      if (this.pollTimeout) {\n        clearTimeout(this.pollTimeout);\n      }\n    }\n    /**\n     * Updates the counter with the number of questions returned in the Ajax call\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_updateCounter\",\n    value: function _updateCounter() {\n      if (this.$counter) {\n        var questionsCount = this.$element.find(\"details\").length;\n        this.$counter.html(\"(\".concat(questionsCount, \")\"));\n      }\n    }\n  }]);\n\n  return PollComponent;\n}();\n\nexport { PollComponent as default };","map":{"version":3,"mappings":"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","names":["$","window","OPEN","CLOSED","PollComponent","$element","config","$counter","_classCallCheck","questionsUrl","pollingInterval","mounted","questions","length","_fetchQuestions","_stopPolling","html","_storeQuestionState","ajax","url","method","contentType","done","_this","_updateCounter","_setQuestionsState","_pollQuestions","$parent","each","_i","el","$el","questionId","data","open","_this2","_this3","_setQuestionState","state","addClass","prop","pollTimeout","setTimeout","_this4","clearTimeout","questionsCount","find"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-meetings/app/packs/src/decidim/meetings/poll.component.js"],"sourcesContent":["/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n\n/**\n * A plain Javascript component that handles questions from polls in meetings:\n *   - fetches them via Ajax\n *   - enables a polling to automatically update them\n *\n * @class\n * @augments Component\n */\n\n// This is necessary for testing purposes\nconst $ = window.$;\n\n// Default question states\nconst OPEN = \"open\";\nconst CLOSED = \"closed\";\n\nexport default class PollComponent {\n  constructor($element, config, $counter = null) {\n    this.$element = $element;\n    this.$counter = $counter;\n    this.questionsUrl = config.questionsUrl;\n    this.pollingInterval = config.pollingInterval || 5000;\n    this.mounted = false;\n    this.questions = {};\n  }\n\n  /**\n   * Returns if the component is mounted or not\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  isMounted() {\n    return this.mounted;\n  }\n\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  mountComponent() {\n    if (this.$element.length > 0 && !this.mounted) {\n      this.mounted = true;\n      this._fetchQuestions();\n    }\n  }\n\n  unmountComponent() {\n    if (this.mounted) {\n      this.mounted = false;\n      this._stopPolling();\n      this.$element.html(\"\");\n    }\n  }\n\n  /**\n   * Performs the ajax call that updates the list of questions\n   * Before, stores the current questions states to apply them after the ajax call has\n   * been completed\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _fetchQuestions() {\n    // Store current questions state (open / closed) before overwritting them with the Ajax call\n    // response.\n    this._storeQuestionState(this.$element);\n\n    $.ajax({\n      url: this.questionsUrl,\n      method: \"GET\",\n      contentType: \"application/javascript\"\n    }).done(() => {\n      this._updateCounter();\n      this._setQuestionsState(this.$element);\n      this._pollQuestions();\n    });\n  }\n\n  /**\n   * Iterates over all existing questions and stores the state in an internal attribute.\n   * @private\n   * @param {jQuery} $parent - The HTML content for the questionnaire.\n   * @returns {Void} - Returns nothing\n   */\n  _storeQuestionState($parent) {\n    $(\"[data-question]\", $parent).each((_i, el) => {\n      const $el = $(el);\n      const questionId = $el.data(\"question\");\n      if ($el[0].open === true) {\n        this.questions[questionId] = OPEN;\n      } else {\n        this.questions[questionId] = CLOSED;\n      }\n    });\n  }\n\n  /**\n   * Initializes the states of all the questions.\n   * @private\n   * @param {jQuery} $parent - The HTML container for the questionnaire.\n   * @returns {Void} - Returns nothing\n   */\n  _setQuestionsState($parent) {\n    $(\"[data-question]\", $parent).each((_i, el) => {\n      this._setQuestionState($(el));\n    });\n  }\n\n  /**\n   * Initializes the state of a single question with two types of modifications:\n   *   - sets the is-new class if the question is new (doesn't exist in the internal list)\n   *   - sets the state to open if it was open in the internal list\n   * @private\n   * @param {jQuery} $el - The HTML container for the questionnaire.\n   * @returns {Void} - Returns nothing\n   */\n  _setQuestionState($el) {\n    const questionId = $el.data(\"question\");\n    // Current question state\n    const state = this.questions[questionId];\n    // New questions have a special class\n    if (!state) {\n      $el.addClass(\"is-new\");\n    } else if (state === OPEN) {\n      $el.prop(OPEN, true);\n    }\n  }\n\n  /**\n   * Sets a timeout to poll new questions.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _pollQuestions() {\n    this._stopPolling();\n\n    this.pollTimeout = setTimeout(() => {\n      this._fetchQuestions();\n    }, this.pollingInterval);\n  }\n\n  /**\n   * Stops polling for new questions.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _stopPolling() {\n    if (this.pollTimeout) {\n      clearTimeout(this.pollTimeout);\n    }\n  }\n\n  /**\n   * Updates the counter with the number of questions returned in the Ajax call\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _updateCounter() {\n    if (this.$counter) {\n      const questionsCount = this.$element.find(\"details\").length;\n      this.$counter.html(`(${questionsCount})`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}