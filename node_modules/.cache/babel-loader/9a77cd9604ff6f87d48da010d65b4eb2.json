{"ast":null,"code":"/* eslint-disable max-lines */\n\n/* eslint-disable require-jsdoc */\nimport AutoButtonsByMinItemsComponent from \"src/decidim/forms/admin/auto_buttons_by_min_items.component\";\nimport AutoSelectOptionsByTotalItemsComponent from \"src/decidim/forms/admin/auto_select_options_by_total_items.component\";\nimport AutoSelectOptionsFromUrl from \"src/decidim/forms/admin/auto_select_options_from_url.component\";\nimport createLiveTextUpdateComponent from \"src/decidim/forms/admin/live_text_update.component\";\nimport AutoButtonsByPositionComponent from \"src/decidim/admin/auto_buttons_by_position.component\";\nimport AutoLabelByPositionComponent from \"src/decidim/admin/auto_label_by_position.component\";\nimport createSortList from \"src/decidim/admin/sort_list.component\";\nimport createDynamicFields from \"src/decidim/admin/dynamic_fields.component\";\nimport createFieldDependentInputs from \"src/decidim/admin/field_dependent_inputs.component\";\nimport createQuillEditor from \"src/decidim/editor\";\nexport default function createEditableForm() {\n  var wrapperSelector = \".questionnaire-questions\";\n  var fieldSelector = \".questionnaire-question\";\n  var questionTypeSelector = \"select[name$=\\\\[question_type\\\\]]\";\n  var answerOptionFieldSelector = \".questionnaire-question-answer-option\";\n  var answerOptionsWrapperSelector = \".questionnaire-question-answer-options\";\n  var answerOptionRemoveFieldButtonSelector = \".remove-answer-option\";\n  var matrixRowFieldSelector = \".questionnaire-question-matrix-row\";\n  var matrixRowsWrapperSelector = \".questionnaire-question-matrix-rows\";\n  var matrixRowRemoveFieldButtonSelector = \".remove-matrix-row\";\n  var addMatrixRowButtonSelector = \".add-matrix-row\";\n  var maxChoicesWrapperSelector = \".questionnaire-question-max-choices\";\n  var displayConditionFieldSelector = \".questionnaire-question-display-condition\";\n  var displayConditionsWrapperSelector = \".questionnaire-question-display-conditions\";\n  var displayConditionRemoveFieldButtonSelector = \".remove-display-condition\";\n  var displayConditionQuestionSelector = \"select[name$=\\\\[decidim_condition_question_id\\\\]]\";\n  var displayConditionAnswerOptionSelector = \"select[name$=\\\\[decidim_answer_option_id\\\\]]\";\n  var displayConditionTypeSelector = \"select[name$=\\\\[condition_type\\\\]]\";\n  var deletedInputSelector = \"input[name$=\\\\[deleted\\\\]]\";\n  var displayConditionValueWrapperSelector = \".questionnaire-question-display-condition-value\";\n  var displayconditionAnswerOptionWrapperSelector = \".questionnaire-question-display-condition-answer-option\";\n  var addDisplayConditionButtonSelector = \".add-display-condition\";\n\n  var removeDisplayConditionsForFirstQuestion = function removeDisplayConditionsForFirstQuestion() {\n    $(fieldSelector).each(function (idx, el) {\n      var $question = $(el);\n\n      if (idx) {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"false\");\n        $question.find(displayConditionsWrapperSelector).show();\n      } else {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"true\");\n        $question.find(displayConditionsWrapperSelector).hide();\n      }\n    });\n  };\n\n  var autoButtonsByPosition = new AutoButtonsByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    hideOnFirstSelector: \".move-up-question\",\n    hideOnLastSelector: \".move-down-question\"\n  });\n  var autoLabelByPosition = new AutoLabelByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    labelSelector: \".card-title span:first\",\n    onPositionComputed: function onPositionComputed(el, idx) {\n      $(el).find(\"input[name$=\\\\[position\\\\]]:not([name*=\\\\[matrix_rows\\\\]])\").val(idx);\n      autoButtonsByPosition.run();\n      removeDisplayConditionsForFirstQuestion();\n    }\n  });\n  var MULTIPLE_CHOICE_VALUES = [\"single_option\", \"multiple_option\", \"sorting\", \"matrix_single\", \"matrix_multiple\"];\n  var MATRIX_VALUES = [\"matrix_single\", \"matrix_multiple\"];\n\n  var createAutoMaxChoicesByNumberOfAnswerOptions = function createAutoMaxChoicesByNumberOfAnswerOptions(fieldId) {\n    return new AutoSelectOptionsByTotalItemsComponent({\n      wrapperSelector: fieldSelector,\n      selectSelector: \"\".concat(maxChoicesWrapperSelector, \" select\"),\n      listSelector: \"#\".concat(fieldId, \" \").concat(answerOptionsWrapperSelector, \" .questionnaire-question-answer-option:not(.hidden)\")\n    });\n  };\n\n  var createAutoButtonsByMinItemsForAnswerOptions = function createAutoButtonsByMinItemsForAnswerOptions(fieldId) {\n    return new AutoButtonsByMinItemsComponent({\n      wrapperSelector: fieldSelector,\n      listSelector: \"#\".concat(fieldId, \" \").concat(answerOptionsWrapperSelector, \" .questionnaire-question-answer-option:not(.hidden)\"),\n      minItems: 2,\n      hideOnMinItemsOrLessSelector: answerOptionRemoveFieldButtonSelector\n    });\n  };\n\n  var createAutoSelectOptionsFromUrl = function createAutoSelectOptionsFromUrl($field) {\n    return new AutoSelectOptionsFromUrl({\n      source: $field.find(displayConditionQuestionSelector),\n      select: $field.find(displayConditionAnswerOptionSelector),\n      sourceToParams: function sourceToParams($element) {\n        return {\n          id: $element.val()\n        };\n      }\n    });\n  };\n\n  var createSortableList = function createSortableList() {\n    createSortList(\".questionnaire-questions-list:not(.published)\", {\n      handle: \".question-divider\",\n      placeholder: '<div style=\"border-style: dashed; border-color: #000\"></div>',\n      forcePlaceholderSize: true,\n      onSortUpdate: function onSortUpdate() {\n        autoLabelByPosition.run();\n        autoButtonsByPosition.run();\n      }\n    });\n  };\n\n  var createDynamicQuestionTitle = function createDynamicQuestionTitle(fieldId) {\n    var targetSelector = \"#\".concat(fieldId, \" .question-title-statement\");\n    var locale = $(targetSelector).data(\"locale\");\n    var maxLength = $(targetSelector).data(\"max-length\");\n    var omission = $(targetSelector).data(\"omission\");\n    var placeholder = $(targetSelector).data(\"placeholder\");\n    return createLiveTextUpdateComponent({\n      inputSelector: \"#\".concat(fieldId, \" input[name$=\\\\[body_\").concat(locale, \"\\\\]]\"),\n      targetSelector: targetSelector,\n      maxLength: maxLength,\n      omission: omission,\n      placeholder: placeholder\n    });\n  };\n\n  var createCollapsibleQuestion = function createCollapsibleQuestion($target) {\n    var $collapsible = $target.find(\".collapsible\");\n\n    if ($collapsible.length > 0) {\n      var collapsibleId = $collapsible.attr(\"id\").replace(\"-question-card\", \"\");\n      var toggleAttr = \"\".concat(collapsibleId, \"-question-card button--collapse-question-\").concat(collapsibleId, \" button--expand-question-\").concat(collapsibleId);\n      $target.find(\".question--collapse\").data(\"toggle\", toggleAttr);\n    }\n  };\n\n  var createDynamicFieldsForAnswerOptions = function createDynamicFieldsForAnswerOptions(fieldId) {\n    var autoButtons = createAutoButtonsByMinItemsForAnswerOptions(fieldId);\n    var autoSelectOptions = createAutoMaxChoicesByNumberOfAnswerOptions(fieldId);\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-answer-option-id\",\n      wrapperSelector: \"#\".concat(fieldId, \" \").concat(answerOptionsWrapperSelector),\n      containerSelector: \".questionnaire-question-answer-options-list\",\n      fieldSelector: answerOptionFieldSelector,\n      addFieldButtonSelector: \".add-answer-option\",\n      fieldTemplateSelector: \".decidim-answer-option-template\",\n      removeFieldButtonSelector: answerOptionRemoveFieldButtonSelector,\n      onAddField: function onAddField() {\n        autoButtons.run();\n        autoSelectOptions.run();\n      },\n      onRemoveField: function onRemoveField() {\n        autoButtons.run();\n        autoSelectOptions.run();\n      }\n    });\n  };\n\n  var dynamicFieldsForAnswerOptions = {};\n\n  var createDynamicFieldsForMatrixRows = function createDynamicFieldsForMatrixRows(fieldId) {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-matrix-row-id\",\n      wrapperSelector: \"#\".concat(fieldId, \" \").concat(matrixRowsWrapperSelector),\n      containerSelector: \".questionnaire-question-matrix-rows-list\",\n      fieldSelector: matrixRowFieldSelector,\n      addFieldButtonSelector: addMatrixRowButtonSelector,\n      fieldTemplateSelector: \".decidim-matrix-row-template\",\n      removeFieldButtonSelector: matrixRowRemoveFieldButtonSelector,\n      onAddField: function onAddField() {},\n      onRemoveField: function onRemoveField() {}\n    });\n  };\n\n  var dynamicFieldsForMatrixRows = {};\n\n  var isMultipleChoiceOption = function isMultipleChoiceOption(value) {\n    return MULTIPLE_CHOICE_VALUES.indexOf(value) >= 0;\n  };\n\n  var isMatrix = function isMatrix(value) {\n    return MATRIX_VALUES.indexOf(value) >= 0;\n  };\n\n  var getSelectedQuestionType = function getSelectedQuestionType(select) {\n    var selectedOption = select.options[select.selectedIndex];\n    return $(selectedOption).data(\"type\");\n  };\n\n  var onDisplayConditionQuestionChange = function onDisplayConditionQuestionChange($field) {\n    var $questionSelector = $field.find(displayConditionQuestionSelector);\n    var selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n    var isMultiple = isMultipleChoiceOption(selectedQuestionType);\n    var conditionTypes = [\"answered\", \"not_answered\"];\n\n    if (isMultiple) {\n      conditionTypes.push(\"equal\");\n      conditionTypes.push(\"not_equal\");\n    }\n\n    conditionTypes.push(\"match\");\n    var $conditionTypeSelect = $field.find(displayConditionTypeSelector);\n    $conditionTypeSelect.find(\"option\").each(function (idx, option) {\n      var $option = $(option);\n      var value = $option.val();\n\n      if (!value) {\n        return;\n      }\n\n      $option.show();\n\n      if (conditionTypes.indexOf(value) < 0) {\n        $option.hide();\n      }\n    });\n\n    if (conditionTypes.indexOf($conditionTypeSelect.val()) < 0) {\n      $conditionTypeSelect.val(conditionTypes[0]);\n    }\n\n    $conditionTypeSelect.trigger(\"change\");\n  };\n\n  var onDisplayConditionTypeChange = function onDisplayConditionTypeChange($field) {\n    var value = $field.find(displayConditionTypeSelector).val();\n    var $valueWrapper = $field.find(displayConditionValueWrapperSelector);\n    var $answerOptionWrapper = $field.find(displayconditionAnswerOptionWrapperSelector);\n    var $questionSelector = $field.find(displayConditionQuestionSelector);\n    var selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n    var isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    if (value === \"match\") {\n      $valueWrapper.show();\n    } else {\n      $valueWrapper.hide();\n    }\n\n    if (isMultiple && (value === \"not_equal\" || value === \"equal\")) {\n      $answerOptionWrapper.show();\n    } else {\n      $answerOptionWrapper.hide();\n    }\n  };\n\n  var initializeDisplayConditionField = function initializeDisplayConditionField($field) {\n    var autoSelectByUrl = createAutoSelectOptionsFromUrl($field);\n    autoSelectByUrl.run();\n    $field.find(displayConditionQuestionSelector).on(\"change\", function () {\n      onDisplayConditionQuestionChange($field);\n    });\n    $field.find(displayConditionTypeSelector).on(\"change\", function () {\n      onDisplayConditionTypeChange($field);\n    });\n    onDisplayConditionTypeChange($field);\n    onDisplayConditionQuestionChange($field);\n  };\n\n  var createDynamicFieldsForDisplayConditions = function createDynamicFieldsForDisplayConditions(fieldId) {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-display-condition-id\",\n      wrapperSelector: \"#\".concat(fieldId, \" \").concat(displayConditionsWrapperSelector),\n      containerSelector: \".questionnaire-question-display-conditions-list\",\n      fieldSelector: displayConditionFieldSelector,\n      addFieldButtonSelector: addDisplayConditionButtonSelector,\n      removeFieldButtonSelector: displayConditionRemoveFieldButtonSelector,\n      onAddField: function onAddField($field) {\n        initializeDisplayConditionField($field);\n      },\n      onRemoveField: function onRemoveField() {}\n    });\n  };\n\n  var dynamicFieldsForDisplayConditions = {};\n\n  var setupInitialQuestionAttributes = function setupInitialQuestionAttributes($target) {\n    var fieldId = $target.attr(\"id\");\n    var $fieldQuestionTypeSelect = $target.find(questionTypeSelector);\n    createCollapsibleQuestion($target);\n    createDynamicQuestionTitle(fieldId);\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: answerOptionsWrapperSelector,\n      dependentInputSelector: \"\".concat(answerOptionFieldSelector, \" input\"),\n      enablingCondition: function enablingCondition($field) {\n        return isMultipleChoiceOption($field.val());\n      }\n    });\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: maxChoicesWrapperSelector,\n      dependentInputSelector: \"select\",\n      enablingCondition: function enablingCondition($field) {\n        return $field.val() === \"multiple_option\" || $field.val() === \"matrix_multiple\";\n      }\n    });\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: matrixRowsWrapperSelector,\n      dependentInputSelector: \"\".concat(matrixRowFieldSelector, \" input\"),\n      enablingCondition: function enablingCondition($field) {\n        return isMatrix($field.val());\n      }\n    });\n    dynamicFieldsForAnswerOptions[fieldId] = createDynamicFieldsForAnswerOptions(fieldId);\n    dynamicFieldsForMatrixRows[fieldId] = createDynamicFieldsForMatrixRows(fieldId);\n    dynamicFieldsForDisplayConditions[fieldId] = createDynamicFieldsForDisplayConditions(fieldId);\n    var dynamicFieldsAnswerOptions = dynamicFieldsForAnswerOptions[fieldId];\n    var dynamicFieldsMatrixRows = dynamicFieldsForMatrixRows[fieldId];\n\n    var onQuestionTypeChange = function onQuestionTypeChange() {\n      if (isMultipleChoiceOption($fieldQuestionTypeSelect.val())) {\n        var nOptions = $fieldQuestionTypeSelect.parents(fieldSelector).find(answerOptionFieldSelector).length;\n\n        if (nOptions === 0) {\n          dynamicFieldsAnswerOptions._addField();\n\n          dynamicFieldsAnswerOptions._addField();\n        }\n      }\n\n      if (isMatrix($fieldQuestionTypeSelect.val())) {\n        var nRows = $fieldQuestionTypeSelect.parents(fieldSelector).find(matrixRowFieldSelector).length;\n\n        if (nRows === 0) {\n          dynamicFieldsMatrixRows._addField();\n\n          dynamicFieldsMatrixRows._addField();\n        }\n      }\n    };\n\n    $fieldQuestionTypeSelect.on(\"change\", onQuestionTypeChange);\n    onQuestionTypeChange();\n  };\n\n  var hideDeletedQuestion = function hideDeletedQuestion($target) {\n    var inputDeleted = $target.find(\"input[name$=\\\\[deleted\\\\]]\").val();\n\n    if (inputDeleted === \"true\") {\n      $target.addClass(\"hidden\");\n      $target.hide();\n    }\n  };\n\n  createDynamicFields({\n    placeholderId: \"questionnaire-question-id\",\n    wrapperSelector: wrapperSelector,\n    containerSelector: \".questionnaire-questions-list\",\n    fieldSelector: fieldSelector,\n    addFieldButtonSelector: \".add-question\",\n    addSeparatorButtonSelector: \".add-separator\",\n    addTitleAndDescriptionButtonSelector: \".add-title-and-description\",\n    fieldTemplateSelector: \".decidim-question-template\",\n    separatorTemplateSelector: \".decidim-separator-template\",\n    TitleAndDescriptionTemplateSelector: \".decidim-title-and-description-template\",\n    removeFieldButtonSelector: \".remove-question\",\n    moveUpFieldButtonSelector: \".move-up-question\",\n    moveDownFieldButtonSelector: \".move-down-question\",\n    onAddField: function onAddField($field) {\n      setupInitialQuestionAttributes($field);\n      createSortableList();\n      $field.find(\".editor-container\").each(function (idx, el) {\n        createQuillEditor(el);\n      });\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onRemoveField: function onRemoveField($field) {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n      $field.find(answerOptionRemoveFieldButtonSelector).each(function (idx, el) {\n        dynamicFieldsForAnswerOptions[$field.attr(\"id\")]._removeField(el);\n      });\n      $field.find(matrixRowRemoveFieldButtonSelector).each(function (idx, el) {\n        dynamicFieldsForMatrixRows[$field.attr(\"id\")]._removeField(el);\n      });\n      $field.find(displayConditionRemoveFieldButtonSelector).each(function (idx, el) {\n        dynamicFieldsForDisplayConditions[$field.attr(\"id\")]._removeField(el);\n      });\n    },\n    onMoveUpField: function onMoveUpField() {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onMoveDownField: function onMoveDownField() {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    }\n  });\n  createSortableList();\n  $(fieldSelector).each(function (idx, el) {\n    var $target = $(el);\n    hideDeletedQuestion($target);\n    setupInitialQuestionAttributes($target);\n  });\n  $(displayConditionFieldSelector).each(function (idx, el) {\n    var $field = $(el);\n    initializeDisplayConditionField($field);\n  });\n  autoLabelByPosition.run();\n  autoButtonsByPosition.run();\n}","map":{"version":3,"mappings":"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","names":["AutoButtonsByMinItemsComponent","AutoSelectOptionsByTotalItemsComponent","AutoSelectOptionsFromUrl","createLiveTextUpdateComponent","AutoButtonsByPositionComponent","AutoLabelByPositionComponent","createSortList","createDynamicFields","createFieldDependentInputs","createQuillEditor","createEditableForm","wrapperSelector","fieldSelector","questionTypeSelector","answerOptionFieldSelector","answerOptionsWrapperSelector","answerOptionRemoveFieldButtonSelector","matrixRowFieldSelector","matrixRowsWrapperSelector","matrixRowRemoveFieldButtonSelector","addMatrixRowButtonSelector","maxChoicesWrapperSelector","displayConditionFieldSelector","displayConditionsWrapperSelector","displayConditionRemoveFieldButtonSelector","displayConditionQuestionSelector","displayConditionAnswerOptionSelector","displayConditionTypeSelector","deletedInputSelector","displayConditionValueWrapperSelector","displayconditionAnswerOptionWrapperSelector","addDisplayConditionButtonSelector","removeDisplayConditionsForFirstQuestion","$","each","idx","el","$question","find","val","show","hide","autoButtonsByPosition","listSelector","hideOnFirstSelector","hideOnLastSelector","autoLabelByPosition","labelSelector","onPositionComputed","run","MULTIPLE_CHOICE_VALUES","MATRIX_VALUES","createAutoMaxChoicesByNumberOfAnswerOptions","fieldId","selectSelector","createAutoButtonsByMinItemsForAnswerOptions","minItems","hideOnMinItemsOrLessSelector","createAutoSelectOptionsFromUrl","$field","source","select","sourceToParams","$element","id","createSortableList","handle","placeholder","forcePlaceholderSize","onSortUpdate","createDynamicQuestionTitle","targetSelector","locale","data","maxLength","omission","inputSelector","createCollapsibleQuestion","$target","$collapsible","length","collapsibleId","attr","replace","toggleAttr","createDynamicFieldsForAnswerOptions","autoButtons","autoSelectOptions","placeholderId","containerSelector","addFieldButtonSelector","fieldTemplateSelector","removeFieldButtonSelector","onAddField","onRemoveField","dynamicFieldsForAnswerOptions","createDynamicFieldsForMatrixRows","dynamicFieldsForMatrixRows","isMultipleChoiceOption","value","indexOf","isMatrix","getSelectedQuestionType","selectedOption","options","selectedIndex","onDisplayConditionQuestionChange","$questionSelector","selectedQuestionType","isMultiple","conditionTypes","push","$conditionTypeSelect","option","$option","trigger","onDisplayConditionTypeChange","$valueWrapper","$answerOptionWrapper","initializeDisplayConditionField","autoSelectByUrl","on","createDynamicFieldsForDisplayConditions","dynamicFieldsForDisplayConditions","setupInitialQuestionAttributes","$fieldQuestionTypeSelect","controllerField","dependentFieldsSelector","dependentInputSelector","enablingCondition","dynamicFieldsAnswerOptions","dynamicFieldsMatrixRows","onQuestionTypeChange","nOptions","parents","_addField","nRows","hideDeletedQuestion","inputDeleted","addClass","addSeparatorButtonSelector","addTitleAndDescriptionButtonSelector","separatorTemplateSelector","TitleAndDescriptionTemplateSelector","moveUpFieldButtonSelector","moveDownFieldButtonSelector","_removeField","onMoveUpField","onMoveDownField"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-forms/app/packs/src/decidim/forms/admin/forms.js"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable require-jsdoc */\n\nimport AutoButtonsByMinItemsComponent from \"src/decidim/forms/admin/auto_buttons_by_min_items.component\"\nimport AutoSelectOptionsByTotalItemsComponent from \"src/decidim/forms/admin/auto_select_options_by_total_items.component\"\nimport AutoSelectOptionsFromUrl from \"src/decidim/forms/admin/auto_select_options_from_url.component\"\nimport createLiveTextUpdateComponent from \"src/decidim/forms/admin/live_text_update.component\"\nimport AutoButtonsByPositionComponent from \"src/decidim/admin/auto_buttons_by_position.component\"\nimport AutoLabelByPositionComponent from \"src/decidim/admin/auto_label_by_position.component\"\nimport createSortList from \"src/decidim/admin/sort_list.component\"\nimport createDynamicFields from \"src/decidim/admin/dynamic_fields.component\"\nimport createFieldDependentInputs from \"src/decidim/admin/field_dependent_inputs.component\"\nimport createQuillEditor from \"src/decidim/editor\"\n\nexport default function createEditableForm() {\n  const wrapperSelector = \".questionnaire-questions\";\n  const fieldSelector = \".questionnaire-question\";\n  const questionTypeSelector = \"select[name$=\\\\[question_type\\\\]]\";\n  const answerOptionFieldSelector = \".questionnaire-question-answer-option\";\n  const answerOptionsWrapperSelector = \".questionnaire-question-answer-options\";\n  const answerOptionRemoveFieldButtonSelector = \".remove-answer-option\";\n  const matrixRowFieldSelector = \".questionnaire-question-matrix-row\";\n  const matrixRowsWrapperSelector = \".questionnaire-question-matrix-rows\";\n  const matrixRowRemoveFieldButtonSelector = \".remove-matrix-row\";\n  const addMatrixRowButtonSelector = \".add-matrix-row\";\n  const maxChoicesWrapperSelector = \".questionnaire-question-max-choices\";\n\n  const displayConditionFieldSelector = \".questionnaire-question-display-condition\";\n  const displayConditionsWrapperSelector = \".questionnaire-question-display-conditions\";\n  const displayConditionRemoveFieldButtonSelector = \".remove-display-condition\";\n\n  const displayConditionQuestionSelector = \"select[name$=\\\\[decidim_condition_question_id\\\\]]\";\n  const displayConditionAnswerOptionSelector = \"select[name$=\\\\[decidim_answer_option_id\\\\]]\";\n  const displayConditionTypeSelector = \"select[name$=\\\\[condition_type\\\\]]\";\n  const deletedInputSelector = \"input[name$=\\\\[deleted\\\\]]\";\n\n  const displayConditionValueWrapperSelector = \".questionnaire-question-display-condition-value\";\n  const displayconditionAnswerOptionWrapperSelector = \".questionnaire-question-display-condition-answer-option\";\n\n  const addDisplayConditionButtonSelector = \".add-display-condition\";\n\n  const removeDisplayConditionsForFirstQuestion = () => {\n    $(fieldSelector).each((idx, el) => {\n      const $question = $(el);\n      if (idx) {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"false\");\n        $question.find(displayConditionsWrapperSelector).show();\n      }\n      else {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"true\");\n        $question.find(displayConditionsWrapperSelector).hide();\n      }\n    });\n  };\n\n  const autoButtonsByPosition = new AutoButtonsByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    hideOnFirstSelector: \".move-up-question\",\n    hideOnLastSelector: \".move-down-question\"\n  });\n\n  const autoLabelByPosition = new AutoLabelByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    labelSelector: \".card-title span:first\",\n    onPositionComputed: (el, idx) => {\n      $(el).find(\"input[name$=\\\\[position\\\\]]:not([name*=\\\\[matrix_rows\\\\]])\").val(idx);\n\n      autoButtonsByPosition.run();\n\n      removeDisplayConditionsForFirstQuestion();\n    }\n  });\n\n  const MULTIPLE_CHOICE_VALUES = [\"single_option\", \"multiple_option\", \"sorting\", \"matrix_single\", \"matrix_multiple\"];\n  const MATRIX_VALUES = [\"matrix_single\", \"matrix_multiple\"];\n\n  const createAutoMaxChoicesByNumberOfAnswerOptions = (fieldId) => {\n    return new AutoSelectOptionsByTotalItemsComponent({\n      wrapperSelector: fieldSelector,\n      selectSelector: `${maxChoicesWrapperSelector} select`,\n      listSelector: `#${fieldId} ${answerOptionsWrapperSelector} .questionnaire-question-answer-option:not(.hidden)`\n    })\n  };\n\n  const createAutoButtonsByMinItemsForAnswerOptions = (fieldId) => {\n    return new AutoButtonsByMinItemsComponent({\n      wrapperSelector: fieldSelector,\n      listSelector: `#${fieldId} ${answerOptionsWrapperSelector} .questionnaire-question-answer-option:not(.hidden)`,\n      minItems: 2,\n      hideOnMinItemsOrLessSelector: answerOptionRemoveFieldButtonSelector\n    })\n  };\n\n  const createAutoSelectOptionsFromUrl = ($field) => {\n    return new AutoSelectOptionsFromUrl({\n      source: $field.find(displayConditionQuestionSelector),\n      select: $field.find(displayConditionAnswerOptionSelector),\n      sourceToParams: ($element) => { return { id: $element.val() } }\n    })\n  };\n\n  const createSortableList = () => {\n    createSortList(\".questionnaire-questions-list:not(.published)\", {\n      handle: \".question-divider\",\n      placeholder: '<div style=\"border-style: dashed; border-color: #000\"></div>',\n      forcePlaceholderSize: true,\n      onSortUpdate: () => {\n        autoLabelByPosition.run();\n        autoButtonsByPosition.run();\n      }\n    });\n  };\n\n  const createDynamicQuestionTitle = (fieldId) => {\n    const targetSelector = `#${fieldId} .question-title-statement`;\n    const locale = $(targetSelector).data(\"locale\");\n    const maxLength = $(targetSelector).data(\"max-length\");\n    const omission = $(targetSelector).data(\"omission\");\n    const placeholder = $(targetSelector).data(\"placeholder\");\n\n    return createLiveTextUpdateComponent({\n      inputSelector: `#${fieldId} input[name$=\\\\[body_${locale}\\\\]]`,\n      targetSelector: targetSelector,\n      maxLength: maxLength,\n      omission: omission,\n      placeholder: placeholder\n    });\n  }\n\n  const createCollapsibleQuestion = ($target) => {\n    const $collapsible = $target.find(\".collapsible\");\n    if ($collapsible.length > 0) {\n      const collapsibleId = $collapsible.attr(\"id\").replace(\"-question-card\", \"\");\n      const toggleAttr = `${collapsibleId}-question-card button--collapse-question-${collapsibleId} button--expand-question-${collapsibleId}`;\n      $target.find(\".question--collapse\").data(\"toggle\", toggleAttr);\n    }\n  };\n\n  const createDynamicFieldsForAnswerOptions = (fieldId) => {\n    const autoButtons = createAutoButtonsByMinItemsForAnswerOptions(fieldId);\n    const autoSelectOptions = createAutoMaxChoicesByNumberOfAnswerOptions(fieldId);\n\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-answer-option-id\",\n      wrapperSelector: `#${fieldId} ${answerOptionsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-answer-options-list\",\n      fieldSelector: answerOptionFieldSelector,\n      addFieldButtonSelector: \".add-answer-option\",\n      fieldTemplateSelector: \".decidim-answer-option-template\",\n      removeFieldButtonSelector: answerOptionRemoveFieldButtonSelector,\n      onAddField: () => {\n        autoButtons.run();\n        autoSelectOptions.run();\n      },\n      onRemoveField: () => {\n        autoButtons.run();\n        autoSelectOptions.run();\n      }\n    });\n  };\n\n  const dynamicFieldsForAnswerOptions = {};\n\n  const createDynamicFieldsForMatrixRows = (fieldId) => {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-matrix-row-id\",\n      wrapperSelector: `#${fieldId} ${matrixRowsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-matrix-rows-list\",\n      fieldSelector: matrixRowFieldSelector,\n      addFieldButtonSelector: addMatrixRowButtonSelector,\n      fieldTemplateSelector: \".decidim-matrix-row-template\",\n      removeFieldButtonSelector: matrixRowRemoveFieldButtonSelector,\n      onAddField: () => {\n      },\n      onRemoveField: () => {\n      }\n    });\n  };\n\n  const dynamicFieldsForMatrixRows = {};\n\n  const isMultipleChoiceOption = (value) => {\n    return MULTIPLE_CHOICE_VALUES.indexOf(value) >= 0;\n  }\n\n  const isMatrix = (value) => {\n    return MATRIX_VALUES.indexOf(value) >= 0;\n  }\n\n  const getSelectedQuestionType = (select) => {\n    const selectedOption = select.options[select.selectedIndex];\n    return $(selectedOption).data(\"type\");\n  };\n\n  const onDisplayConditionQuestionChange = ($field) => {\n    const $questionSelector = $field.find(displayConditionQuestionSelector);\n    const selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n\n    const isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    let conditionTypes = [\"answered\", \"not_answered\"];\n\n    if (isMultiple) {\n      conditionTypes.push(\"equal\");\n      conditionTypes.push(\"not_equal\");\n    }\n\n    conditionTypes.push(\"match\");\n\n    const $conditionTypeSelect = $field.find(displayConditionTypeSelector);\n\n    $conditionTypeSelect.find(\"option\").each((idx, option) => {\n      const $option = $(option);\n      const value = $option.val();\n\n      if (!value) {\n        return;\n      }\n\n      $option.show();\n\n      if (conditionTypes.indexOf(value) < 0) {\n        $option.hide();\n      }\n    });\n\n    if (conditionTypes.indexOf($conditionTypeSelect.val()) < 0) {\n      $conditionTypeSelect.val(conditionTypes[0]);\n    }\n\n    $conditionTypeSelect.trigger(\"change\");\n  };\n\n  const onDisplayConditionTypeChange = ($field) => {\n    const value = $field.find(displayConditionTypeSelector).val();\n    const $valueWrapper = $field.find(displayConditionValueWrapperSelector);\n    const $answerOptionWrapper = $field.find(displayconditionAnswerOptionWrapperSelector);\n\n    const $questionSelector = $field.find(displayConditionQuestionSelector);\n    const selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n\n    const isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    if (value === \"match\") {\n      $valueWrapper.show();\n    }\n    else {\n      $valueWrapper.hide();\n    }\n\n    if (isMultiple && (value === \"not_equal\" || value === \"equal\")) {\n      $answerOptionWrapper.show();\n    }\n    else {\n      $answerOptionWrapper.hide();\n    }\n  };\n\n  const initializeDisplayConditionField = ($field) => {\n    const autoSelectByUrl = createAutoSelectOptionsFromUrl($field);\n    autoSelectByUrl.run();\n\n    $field.find(displayConditionQuestionSelector).on(\"change\", () => {\n      onDisplayConditionQuestionChange($field);\n    });\n\n    $field.find(displayConditionTypeSelector).on(\"change\", () => {\n      onDisplayConditionTypeChange($field);\n    });\n\n    onDisplayConditionTypeChange($field);\n    onDisplayConditionQuestionChange($field);\n  }\n\n  const createDynamicFieldsForDisplayConditions = (fieldId) => {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-display-condition-id\",\n      wrapperSelector: `#${fieldId} ${displayConditionsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-display-conditions-list\",\n      fieldSelector: displayConditionFieldSelector,\n      addFieldButtonSelector: addDisplayConditionButtonSelector,\n      removeFieldButtonSelector: displayConditionRemoveFieldButtonSelector,\n      onAddField: ($field) => {\n        initializeDisplayConditionField($field);\n      },\n      onRemoveField: () => {\n      }\n    });\n  };\n\n  const dynamicFieldsForDisplayConditions = {};\n\n  const setupInitialQuestionAttributes = ($target) => {\n    const fieldId = $target.attr(\"id\");\n    const $fieldQuestionTypeSelect = $target.find(questionTypeSelector);\n\n    createCollapsibleQuestion($target);\n    createDynamicQuestionTitle(fieldId);\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: answerOptionsWrapperSelector,\n      dependentInputSelector: `${answerOptionFieldSelector} input`,\n      enablingCondition: ($field) => {\n        return isMultipleChoiceOption($field.val());\n      }\n    });\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: maxChoicesWrapperSelector,\n      dependentInputSelector: \"select\",\n      enablingCondition: ($field) => {\n        return $field.val() === \"multiple_option\" || $field.val() === \"matrix_multiple\";\n      }\n    });\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: matrixRowsWrapperSelector,\n      dependentInputSelector: `${matrixRowFieldSelector} input`,\n      enablingCondition: ($field) => {\n        return isMatrix($field.val());\n      }\n    });\n\n    dynamicFieldsForAnswerOptions[fieldId] = createDynamicFieldsForAnswerOptions(fieldId);\n    dynamicFieldsForMatrixRows[fieldId] = createDynamicFieldsForMatrixRows(fieldId);\n    dynamicFieldsForDisplayConditions[fieldId] = createDynamicFieldsForDisplayConditions(fieldId);\n\n    const dynamicFieldsAnswerOptions = dynamicFieldsForAnswerOptions[fieldId];\n    const dynamicFieldsMatrixRows = dynamicFieldsForMatrixRows[fieldId];\n\n    const onQuestionTypeChange = () => {\n      if (isMultipleChoiceOption($fieldQuestionTypeSelect.val())) {\n        const nOptions = $fieldQuestionTypeSelect.parents(fieldSelector).find(answerOptionFieldSelector).length;\n\n        if (nOptions === 0) {\n          dynamicFieldsAnswerOptions._addField();\n          dynamicFieldsAnswerOptions._addField();\n        }\n      }\n\n      if (isMatrix($fieldQuestionTypeSelect.val())) {\n        const nRows = $fieldQuestionTypeSelect.parents(fieldSelector).find(matrixRowFieldSelector).length;\n\n        if (nRows === 0) {\n          dynamicFieldsMatrixRows._addField();\n          dynamicFieldsMatrixRows._addField();\n        }\n      }\n    };\n\n    $fieldQuestionTypeSelect.on(\"change\", onQuestionTypeChange);\n\n    onQuestionTypeChange();\n  }\n\n  const hideDeletedQuestion = ($target) => {\n    const inputDeleted = $target.find(\"input[name$=\\\\[deleted\\\\]]\").val();\n\n    if (inputDeleted === \"true\") {\n      $target.addClass(\"hidden\");\n      $target.hide();\n    }\n  }\n\n  createDynamicFields({\n    placeholderId: \"questionnaire-question-id\",\n    wrapperSelector: wrapperSelector,\n    containerSelector: \".questionnaire-questions-list\",\n    fieldSelector: fieldSelector,\n    addFieldButtonSelector: \".add-question\",\n    addSeparatorButtonSelector: \".add-separator\",\n    addTitleAndDescriptionButtonSelector: \".add-title-and-description\",\n    fieldTemplateSelector: \".decidim-question-template\",\n    separatorTemplateSelector: \".decidim-separator-template\",\n    TitleAndDescriptionTemplateSelector: \".decidim-title-and-description-template\",\n    removeFieldButtonSelector: \".remove-question\",\n    moveUpFieldButtonSelector: \".move-up-question\",\n    moveDownFieldButtonSelector: \".move-down-question\",\n    onAddField: ($field) => {\n      setupInitialQuestionAttributes($field);\n      createSortableList();\n\n      $field.find(\".editor-container\").each((idx, el) => {\n        createQuillEditor(el);\n      });\n\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onRemoveField: ($field) => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n\n      $field.find(answerOptionRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForAnswerOptions[$field.attr(\"id\")]._removeField(el);\n      });\n\n      $field.find(matrixRowRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForMatrixRows[$field.attr(\"id\")]._removeField(el);\n      });\n\n      $field.find(displayConditionRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForDisplayConditions[$field.attr(\"id\")]._removeField(el);\n      });\n    },\n    onMoveUpField: () => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onMoveDownField: () => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    }\n  });\n\n  createSortableList();\n\n  $(fieldSelector).each((idx, el) => {\n    const $target = $(el);\n\n    hideDeletedQuestion($target);\n    setupInitialQuestionAttributes($target);\n  });\n\n  $(displayConditionFieldSelector).each((idx, el) => {\n    const $field = $(el);\n    initializeDisplayConditionField($field)\n  });\n\n  autoLabelByPosition.run();\n  autoButtonsByPosition.run();\n}\n"]},"metadata":{},"sourceType":"module"}