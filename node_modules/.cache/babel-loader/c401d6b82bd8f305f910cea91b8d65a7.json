{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/* eslint-disable require-jsdoc */\n\n/**\n * This component allows for an element's text value to be updated with the value\n * of an input whenever this input's value is changed.\n *\n * @param {object} options\n *\n * Available options:\n * {string} `inputSelector`:  The query selector to locate the input element\n * {string} `targetSelector`: The query selector to locate the target element\n * {number} `maxLength`: The maximum characters from the input value to be displayed in the target\n * {string} `omission`: The string used to shorten the value to the given maxLength (e.g. \"...\")\n * {string} `placeholder`: The string to be displayed in the target element when the input has no value\n */\n\n\nvar LiveTextUpdateComponent = /*#__PURE__*/function () {\n  function LiveTextUpdateComponent() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LiveTextUpdateComponent);\n\n    this.inputSelector = options.inputSelector;\n    this.targetSelector = options.targetSelector;\n    this.maxLength = options.maxLength;\n    this.omission = options.omission;\n    this.placeholder = options.placeholder;\n\n    this._bindEvent();\n\n    this._run();\n  }\n\n  _createClass(LiveTextUpdateComponent, [{\n    key: \"_run\",\n    value: function _run() {\n      var $input = $(this.inputSelector);\n      var $target = $(this.targetSelector);\n      var text = $input.val() || this.placeholder; // truncate string\n\n      if (text.length > this.maxLength) {\n        text = text.substring(0, this.maxLength - this.omission.length) + this.omission;\n      }\n\n      $target.text(text);\n    }\n  }, {\n    key: \"_bindEvent\",\n    value: function _bindEvent() {\n      var $input = $(this.inputSelector);\n      $input.on(\"change\", this._run.bind(this));\n    }\n  }]);\n\n  return LiveTextUpdateComponent;\n}();\n\nexport default function createLiveTextUpdateComponent(options) {\n  return new LiveTextUpdateComponent(options);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMA,uB;EACJ,mCAA0B;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAAAC;;IACxB,KAAKC,aAAL,GAAqBF,OAAO,CAACE,aAA7B;IACA,KAAKC,cAAL,GAAsBH,OAAO,CAACG,cAA9B;IACA,KAAKC,SAAL,GAAiBJ,OAAO,CAACI,SAAzB;IACA,KAAKC,QAAL,GAAgBL,OAAO,CAACK,QAAxB;IACA,KAAKC,WAAL,GAAmBN,OAAO,CAACM,WAA3B;;IACA,KAAKC,UAAL;;IACA,KAAKC,IAAL;EACD;;;;WAED,gBAAO;MACL,IAAMC,MAAM,GAAGC,CAAC,CAAC,KAAKR,aAAN,CAAhB;MACA,IAAMS,OAAO,GAAGD,CAAC,CAAC,KAAKP,cAAN,CAAjB;MAEA,IAAIS,IAAI,GAAGH,MAAM,CAACI,GAAPJ,MAAgB,KAAKH,WAAhC,CAJK,CAML;;MACA,IAAIM,IAAI,CAACE,MAALF,GAAc,KAAKR,SAAvB,EAAkC;QAChCQ,IAAI,GAAGA,IAAI,CAACG,SAALH,CAAe,CAAfA,EAAkB,KAAKR,SAAL,GAAiB,KAAKC,QAAL,CAAcS,MAAjDF,IAA2D,KAAKP,QAAvEO;MACD;;MAEDD,OAAO,CAACC,IAARD,CAAaC,IAAbD;IACD;;;WAED,sBAAa;MACX,IAAMF,MAAM,GAAGC,CAAC,CAAC,KAAKR,aAAN,CAAhB;MACAO,MAAM,CAACO,EAAPP,CAAU,QAAVA,EAAoB,KAAKD,IAAL,CAAUS,IAAV,CAAe,IAAf,CAApBR;IACD;;;;;;AAGH,eAAe,SAASS,6BAAT,CAAuClB,OAAvC,EAAgD;EAC7D,OAAO,IAAID,uBAAJ,CAA4BC,OAA5B,CAAP;AACD","names":["LiveTextUpdateComponent","options","_classCallCheck","inputSelector","targetSelector","maxLength","omission","placeholder","_bindEvent","_run","$input","$","$target","text","val","length","substring","on","bind","createLiveTextUpdateComponent"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-forms/app/packs/src/decidim/forms/admin/live_text_update.component.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\n/**\n * This component allows for an element's text value to be updated with the value\n * of an input whenever this input's value is changed.\n *\n * @param {object} options\n *\n * Available options:\n * {string} `inputSelector`:  The query selector to locate the input element\n * {string} `targetSelector`: The query selector to locate the target element\n * {number} `maxLength`: The maximum characters from the input value to be displayed in the target\n * {string} `omission`: The string used to shorten the value to the given maxLength (e.g. \"...\")\n * {string} `placeholder`: The string to be displayed in the target element when the input has no value\n */\nclass LiveTextUpdateComponent {\n  constructor(options = {}) {\n    this.inputSelector = options.inputSelector;\n    this.targetSelector = options.targetSelector;\n    this.maxLength = options.maxLength;\n    this.omission = options.omission;\n    this.placeholder = options.placeholder;\n    this._bindEvent();\n    this._run();\n  }\n\n  _run() {\n    const $input = $(this.inputSelector);\n    const $target = $(this.targetSelector);\n\n    let text = $input.val() || this.placeholder;\n\n    // truncate string\n    if (text.length > this.maxLength) {\n      text = text.substring(0, this.maxLength - this.omission.length) + this.omission;\n    }\n\n    $target.text(text);\n  }\n\n  _bindEvent() {\n    const $input = $(this.inputSelector);\n    $input.on(\"change\", this._run.bind(this));\n  }\n}\n\nexport default function createLiveTextUpdateComponent(options) {\n  return new LiveTextUpdateComponent(options);\n}\n"]},"metadata":{},"sourceType":"module"}