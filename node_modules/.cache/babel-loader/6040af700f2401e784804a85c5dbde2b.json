{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\n * A custom confirm dialog for Decidim based on Foundation reveals.\n *\n * Note that this needs to be loaded before the application JS in order for\n * it to gain control over the confirm events BEFORE rails-ujs is loaded.\n */\n\n\nimport Rails from \"@rails/ujs\";\nvar TEMPLATE_HTML = null;\n\nvar ConfirmDialog = /*#__PURE__*/function () {\n  function ConfirmDialog(sourceElement) {\n    _classCallCheck(this, ConfirmDialog);\n\n    this.$modal = $(TEMPLATE_HTML);\n    this.$source = sourceElement;\n    this.$content = $(\".confirm-modal-content\", this.$modal);\n    this.$buttonConfirm = $(\"[data-confirm-ok]\", this.$modal);\n    this.$buttonCancel = $(\"[data-confirm-cancel]\", this.$modal); // Avoid duplicate IDs and append the new modal to the body\n\n    var titleId = \"confirm-modal-title-\".concat(Math.random().toString(36).substring(7));\n    this.$modal.removeAttr(\"id\");\n    $(\"#confirm-modal-title\", this.$modal).attr(\"id\", titleId);\n    this.$modal.attr(\"aria-labelledby\", titleId);\n    $(\"body\").append(this.$modal);\n    this.$modal.foundation();\n  }\n\n  _createClass(ConfirmDialog, [{\n    key: \"confirm\",\n    value: function confirm(message) {\n      var _this = this;\n\n      this.$content.html(message);\n      this.$buttonConfirm.off(\"click\");\n      this.$buttonCancel.off(\"click\");\n      return new Promise(function (resolve) {\n        _this.$buttonConfirm.on(\"click\", function (ev) {\n          ev.preventDefault();\n\n          _this.$modal.foundation(\"close\");\n\n          resolve(true);\n\n          _this.$source.focus();\n        });\n\n        _this.$buttonCancel.on(\"click\", function (ev) {\n          ev.preventDefault();\n\n          _this.$modal.foundation(\"close\");\n\n          resolve(false);\n\n          _this.$source.focus();\n        });\n\n        _this.$modal.foundation(\"open\").on(\"closed.zf.reveal\", function () {\n          _this.$modal.remove();\n        });\n      });\n    }\n  }]);\n\n  return ConfirmDialog;\n}(); // Override the default confirm dialog by Rails\n// See:\n// https://github.com/rails/rails/blob/fba1064153d8e2f4654df7762a7d3664b93e9fc8/actionview/app/assets/javascripts/rails-ujs/features/confirm.coffee\n//\n// There is apparently a better way coming in Rails 6:\n// https://github.com/rails/rails/commit/e9aa7ecdee0aa7bb4dcfa5046881bde2f1fe21cc#diff-e1aaa45200e9adcbcb8baf1c5375b5d1\n//\n// The old approach is broken according to https://github.com/rails/rails/issues/36686#issuecomment-514213323\n// so for the moment this needs to be executed **before** Rails.start()\n\n\nvar allowAction = function allowAction(ev, element) {\n  var message = $(element).data(\"confirm\");\n\n  if (!message) {\n    return true;\n  }\n\n  if (!Rails.fire(element, \"confirm\")) {\n    return false;\n  }\n\n  if (TEMPLATE_HTML === null) {\n    TEMPLATE_HTML = $(\"#confirm-modal\")[0].outerHTML;\n    $(\"#confirm-modal\").remove();\n  }\n\n  var dialog = new ConfirmDialog($(element));\n  dialog.confirm(message).then(function (answer) {\n    var completed = Rails.fire(element, \"confirm:complete\", [answer]);\n\n    if (answer && completed) {\n      // Allow the event to propagate normally and re-dispatch it without\n      // the confirm data attribute which the Rails internal method is\n      // checking.\n      $(element).data(\"confirm\", null);\n      $(element).removeAttr(\"data-confirm\"); // The submit button click events won't do anything if they are\n      // dispatched as is. In these cases, just submit the underlying form.\n\n      if (ev.type === \"click\" && ($(element).is('button[type=\"submit\"]') || $(element).is('input[type=\"submit\"]'))) {\n        $(element).parents(\"form\").submit();\n      } else {\n        var origEv = ev.originalEvent || ev;\n        var newEv = origEv;\n\n        if (typeof Event === \"function\") {\n          // Clone the event because otherwise some click events may not\n          // work properly when re-dispatched.\n          newEv = new origEv.constructor(origEv.type, origEv);\n        }\n\n        ev.target.dispatchEvent(newEv);\n      }\n    }\n  });\n  return false;\n};\n\nvar handleConfirm = function handleConfirm(ev, element) {\n  if (!allowAction(ev, element)) {\n    Rails.stopEverything(ev);\n  }\n};\n\nvar getMatchingEventTarget = function getMatchingEventTarget(ev, selector) {\n  var target = ev.target;\n\n  while (!(!(target instanceof Element) || Rails.matches(target, selector))) {\n    target = target.parentNode;\n  }\n\n  if (target instanceof Element) {\n    return target;\n  }\n\n  return null;\n};\n\nvar handleDocumentEvent = function handleDocumentEvent(ev, matchSelectors) {\n  return matchSelectors.some(function (currentSelector) {\n    var target = getMatchingEventTarget(ev, currentSelector);\n\n    if (target === null) {\n      return false;\n    }\n\n    handleConfirm(ev, target);\n    return true;\n  });\n};\n\ndocument.addEventListener(\"click\", function (ev) {\n  return handleDocumentEvent(ev, [Rails.linkClickSelector, Rails.buttonClickSelector, Rails.formInputClickSelector]);\n});\ndocument.addEventListener(\"change\", function (ev) {\n  return handleDocumentEvent(ev, [Rails.inputChangeSelector]);\n});\ndocument.addEventListener(\"submit\", function (ev) {\n  return handleDocumentEvent(ev, [Rails.formSubmitSelector]);\n}); // This is needed for the confirm dialog to work with Foundation Abide.\n// Abide registers its own submit click listeners since Foundation 5.6.x\n// which will be handled before the document listeners above. This would\n// break the custom confirm functionality when used with Foundation Abide.\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  $(Rails.formInputClickSelector).on(\"click.confirm\", function (ev) {\n    handleConfirm(ev, getMatchingEventTarget(ev, Rails.formInputClickSelector));\n  });\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,IAAIC,aAAa,GAAG,IAApB;;IAEMC,a;EACJ,uBAAYC,aAAZ,EAA2B;IAAAC;;IACzB,KAAKC,MAAL,GAAcC,CAAC,CAACL,aAAD,CAAf;IACA,KAAKM,OAAL,GAAeJ,aAAf;IACA,KAAKK,QAAL,GAAgBF,CAAC,CAAC,wBAAD,EAA2B,KAAKD,MAAhC,CAAjB;IACA,KAAKI,cAAL,GAAsBH,CAAC,CAAC,mBAAD,EAAsB,KAAKD,MAA3B,CAAvB;IACA,KAAKK,aAAL,GAAqBJ,CAAC,CAAC,uBAAD,EAA0B,KAAKD,MAA/B,CAAtB,CALyB,CAOzB;;IACA,IAAMM,OAAO,iCAA0BC,IAAI,CAACC,MAALD,GAAcE,QAAdF,CAAuB,EAAvBA,EAA2BG,SAA3BH,CAAqC,CAArCA,CAA1B,CAAb;IAEA,KAAKP,MAAL,CAAYW,UAAZ,CAAuB,IAAvB;IACAV,CAAC,CAAC,sBAAD,EAAyB,KAAKD,MAA9B,CAADC,CAAuCW,IAAvCX,CAA4C,IAA5CA,EAAkDK,OAAlDL;IACA,KAAKD,MAAL,CAAYY,IAAZ,CAAiB,iBAAjB,EAAoCN,OAApC;IAEAL,CAAC,CAAC,MAAD,CAADA,CAAUY,MAAVZ,CAAiB,KAAKD,MAAtBC;IACA,KAAKD,MAAL,CAAYc,UAAZ;EACD;;;;WAED,iBAAQC,OAAR,EAAiB;MAAA;;MACf,KAAKZ,QAAL,CAAca,IAAd,CAAmBD,OAAnB;MAEA,KAAKX,cAAL,CAAoBa,GAApB,CAAwB,OAAxB;MACA,KAAKZ,aAAL,CAAmBY,GAAnB,CAAuB,OAAvB;MAEA,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;QAC9BC,KAAI,CAAChB,cAAL,CAAoBiB,EAApB,CAAuB,OAAvB,EAAgC,UAACC,EAAD,EAAQ;UACtCA,EAAE,CAACC,cAAHD;;UAEAF,KAAI,CAACpB,MAAL,CAAYc,UAAZ,CAAuB,OAAvB;;UACAK,OAAO,CAAC,IAAD,CAAPA;;UACAC,KAAI,CAAClB,OAAL,CAAasB,KAAb;QALF;;QAOAJ,KAAI,CAACf,aAAL,CAAmBgB,EAAnB,CAAsB,OAAtB,EAA+B,UAACC,EAAD,EAAQ;UACrCA,EAAE,CAACC,cAAHD;;UAEAF,KAAI,CAACpB,MAAL,CAAYc,UAAZ,CAAuB,OAAvB;;UACAK,OAAO,CAAC,KAAD,CAAPA;;UACAC,KAAI,CAAClB,OAAL,CAAasB,KAAb;QALF;;QAQAJ,KAAI,CAACpB,MAAL,CAAYc,UAAZ,CAAuB,MAAvB,EAA+BO,EAA/B,CAAkC,kBAAlC,EAAsD,YAAM;UAC1DD,KAAI,CAACpB,MAAL,CAAYyB,MAAZ;QADF;MAhBK,EAAP;IAoBD;;;;KAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACJ,EAAD,EAAKK,OAAL,EAAiB;EACnC,IAAMZ,OAAO,GAAGd,CAAC,CAAC0B,OAAD,CAAD1B,CAAW2B,IAAX3B,CAAgB,SAAhBA,CAAhB;;EACA,IAAI,CAACc,OAAL,EAAc;IACZ,OAAO,IAAP;EACD;;EAED,IAAI,CAACpB,KAAK,CAACkC,IAANlC,CAAWgC,OAAXhC,EAAoB,SAApBA,CAAL,EAAqC;IACnC,OAAO,KAAP;EACD;;EAED,IAAIC,aAAa,KAAK,IAAtB,EAA4B;IAC1BA,aAAa,GAAGK,CAAC,CAAC,gBAAD,CAADA,CAAoB,CAApBA,EAAuB6B,SAAvClC;IACAK,CAAC,CAAC,gBAAD,CAADA,CAAoBwB,MAApBxB;EACD;;EAED,IAAM8B,MAAM,GAAG,IAAIlC,aAAJ,CACbI,CAAC,CAAC0B,OAAD,CADY,CAAf;EAGAI,MAAM,CAACC,OAAPD,CAAehB,OAAfgB,EAAwBE,IAAxBF,CAA6B,UAACG,MAAD,EAAY;IACvC,IAAMC,SAAS,GAAGxC,KAAK,CAACkC,IAANlC,CAAWgC,OAAXhC,EAAoB,kBAApBA,EAAwC,CAACuC,MAAD,CAAxCvC,CAAlB;;IACA,IAAIuC,MAAM,IAAIC,SAAd,EAAyB;MACvB;MACA;MACA;MACAlC,CAAC,CAAC0B,OAAD,CAAD1B,CAAW2B,IAAX3B,CAAgB,SAAhBA,EAA2B,IAA3BA;MACAA,CAAC,CAAC0B,OAAD,CAAD1B,CAAWU,UAAXV,CAAsB,cAAtBA,EALuB,CAOvB;MACA;;MACA,IAAIqB,EAAE,CAACc,IAAHd,KAAY,OAAZA,KAEArB,CAAC,CAAC0B,OAAD,CAAD1B,CAAWoC,EAAXpC,CAAc,uBAAdA,KACAA,CAAC,CAAC0B,OAAD,CAAD1B,CAAWoC,EAAXpC,CAAc,sBAAdA,CAHAqB,CAAJ,EAKE;QACArB,CAAC,CAAC0B,OAAD,CAAD1B,CAAWqC,OAAXrC,CAAmB,MAAnBA,EAA2BsC,MAA3BtC;MANF,OAOO;QACL,IAAIuC,MAAM,GAAGlB,EAAE,CAACmB,aAAHnB,IAAoBA,EAAjC;QACA,IAAIoB,KAAK,GAAGF,MAAZ;;QACA,IAAI,OAAOG,KAAP,KAAiB,UAArB,EAAiC;UAC/B;UACA;UACAD,KAAK,GAAG,IAAIF,MAAM,CAACI,WAAX,CAAuBJ,MAAM,CAACJ,IAA9B,EAAoCI,MAApC,CAARE;QACD;;QACDpB,EAAE,CAACuB,MAAHvB,CAAUwB,aAAVxB,CAAwBoB,KAAxBpB;MACD;IACF;EA5BH;EA+BA,OAAO,KAAP;AAjDF;;AAmDA,IAAMyB,aAAa,GAAG,SAAhBA,aAAgB,CAACzB,EAAD,EAAKK,OAAL,EAAiB;EACrC,IAAI,CAACD,WAAW,CAACJ,EAAD,EAAKK,OAAL,CAAhB,EAA+B;IAC7BhC,KAAK,CAACqD,cAANrD,CAAqB2B,EAArB3B;EACD;AAHH;;AAKA,IAAMsD,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC3B,EAAD,EAAK4B,QAAL,EAAkB;EAC/C,IAAIL,MAAM,GAAGvB,EAAE,CAACuB,MAAhB;;EACA,OAAO,EAAE,EAAEA,MAAM,YAAYM,OAApB,KAAgCxD,KAAK,CAACyD,OAANzD,CAAckD,MAAdlD,EAAsBuD,QAAtBvD,CAAlC,CAAP,EAA2E;IACzEkD,MAAM,GAAGA,MAAM,CAACQ,UAAhBR;EACD;;EAED,IAAIA,MAAM,YAAYM,OAAtB,EAA+B;IAC7B,OAAON,MAAP;EACD;;EAED,OAAO,IAAP;AAVF;;AAYA,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAChC,EAAD,EAAKiC,cAAL,EAAwB;EAClD,OAAOA,cAAc,CAACC,IAAfD,CAAoB,UAACE,eAAD,EAAqB;IAC9C,IAAIZ,MAAM,GAAGI,sBAAsB,CAAC3B,EAAD,EAAKmC,eAAL,CAAnC;;IACA,IAAIZ,MAAM,KAAK,IAAf,EAAqB;MACnB,OAAO,KAAP;IACD;;IAEDE,aAAa,CAACzB,EAAD,EAAKuB,MAAL,CAAbE;IACA,OAAO,IAAP;EAPK,EAAP;AADF;;AAYAW,QAAQ,CAACC,gBAATD,CAA0B,OAA1BA,EAAmC,UAACpC,EAAD,EAAQ;EACzC,OAAOgC,mBAAmB,CAAChC,EAAD,EAAK,CAC7B3B,KAAK,CAACiE,iBADuB,EAE7BjE,KAAK,CAACkE,mBAFuB,EAG7BlE,KAAK,CAACmE,sBAHuB,CAAL,CAA1B;AADF;AAOAJ,QAAQ,CAACC,gBAATD,CAA0B,QAA1BA,EAAoC,UAACpC,EAAD,EAAQ;EAC1C,OAAOgC,mBAAmB,CAAChC,EAAD,EAAK,CAAC3B,KAAK,CAACoE,mBAAP,CAAL,CAA1B;AADF;AAGAL,QAAQ,CAACC,gBAATD,CAA0B,QAA1BA,EAAoC,UAACpC,EAAD,EAAQ;EAC1C,OAAOgC,mBAAmB,CAAChC,EAAD,EAAK,CAAC3B,KAAK,CAACqE,kBAAP,CAAL,CAA1B;AADF,G,CAIA;AACA;AACA;AACA;;AACAN,QAAQ,CAACC,gBAATD,CAA0B,kBAA1BA,EAA8C,YAAW;EACvDzD,CAAC,CAACN,KAAK,CAACmE,sBAAP,CAAD7D,CAAgCoB,EAAhCpB,CAAmC,eAAnCA,EAAoD,UAACqB,EAAD,EAAQ;IAC1DyB,aAAa,CAACzB,EAAD,EAAK2B,sBAAsB,CAAC3B,EAAD,EAAK3B,KAAK,CAACmE,sBAAX,CAA3B,CAAbf;EADF;AADF","names":["Rails","TEMPLATE_HTML","ConfirmDialog","sourceElement","_classCallCheck","$modal","$","$source","$content","$buttonConfirm","$buttonCancel","titleId","Math","random","toString","substring","removeAttr","attr","append","foundation","message","html","off","Promise","resolve","_this","on","ev","preventDefault","focus","remove","allowAction","element","data","fire","outerHTML","dialog","confirm","then","answer","completed","type","is","parents","submit","origEv","originalEvent","newEv","Event","constructor","target","dispatchEvent","handleConfirm","stopEverything","getMatchingEventTarget","selector","Element","matches","parentNode","handleDocumentEvent","matchSelectors","some","currentSelector","document","addEventListener","linkClickSelector","buttonClickSelector","formInputClickSelector","inputChangeSelector","formSubmitSelector"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/confirm.js"],"sourcesContent":["/**\n * A custom confirm dialog for Decidim based on Foundation reveals.\n *\n * Note that this needs to be loaded before the application JS in order for\n * it to gain control over the confirm events BEFORE rails-ujs is loaded.\n */\n\nimport Rails from \"@rails/ujs\"\n\nlet TEMPLATE_HTML = null;\n\nclass ConfirmDialog {\n  constructor(sourceElement) {\n    this.$modal = $(TEMPLATE_HTML);\n    this.$source = sourceElement;\n    this.$content = $(\".confirm-modal-content\", this.$modal);\n    this.$buttonConfirm = $(\"[data-confirm-ok]\", this.$modal);\n    this.$buttonCancel = $(\"[data-confirm-cancel]\", this.$modal);\n\n    // Avoid duplicate IDs and append the new modal to the body\n    const titleId = `confirm-modal-title-${Math.random().toString(36).substring(7)}`;\n\n    this.$modal.removeAttr(\"id\");\n    $(\"#confirm-modal-title\", this.$modal).attr(\"id\", titleId);\n    this.$modal.attr(\"aria-labelledby\", titleId);\n\n    $(\"body\").append(this.$modal);\n    this.$modal.foundation();\n  }\n\n  confirm(message) {\n    this.$content.html(message);\n\n    this.$buttonConfirm.off(\"click\");\n    this.$buttonCancel.off(\"click\");\n\n    return new Promise((resolve) => {\n      this.$buttonConfirm.on(\"click\", (ev) => {\n        ev.preventDefault();\n\n        this.$modal.foundation(\"close\");\n        resolve(true);\n        this.$source.focus();\n      });\n      this.$buttonCancel.on(\"click\", (ev) => {\n        ev.preventDefault();\n\n        this.$modal.foundation(\"close\");\n        resolve(false);\n        this.$source.focus();\n      });\n\n      this.$modal.foundation(\"open\").on(\"closed.zf.reveal\", () => {\n        this.$modal.remove();\n      });\n    });\n  }\n}\n\n// Override the default confirm dialog by Rails\n// See:\n// https://github.com/rails/rails/blob/fba1064153d8e2f4654df7762a7d3664b93e9fc8/actionview/app/assets/javascripts/rails-ujs/features/confirm.coffee\n//\n// There is apparently a better way coming in Rails 6:\n// https://github.com/rails/rails/commit/e9aa7ecdee0aa7bb4dcfa5046881bde2f1fe21cc#diff-e1aaa45200e9adcbcb8baf1c5375b5d1\n//\n// The old approach is broken according to https://github.com/rails/rails/issues/36686#issuecomment-514213323\n// so for the moment this needs to be executed **before** Rails.start()\nconst allowAction = (ev, element) => {\n  const message = $(element).data(\"confirm\");\n  if (!message) {\n    return true;\n  }\n\n  if (!Rails.fire(element, \"confirm\")) {\n    return false;\n  }\n\n  if (TEMPLATE_HTML === null) {\n    TEMPLATE_HTML = $(\"#confirm-modal\")[0].outerHTML;\n    $(\"#confirm-modal\").remove();\n  }\n\n  const dialog = new ConfirmDialog(\n    $(element)\n  );\n  dialog.confirm(message).then((answer) => {\n    const completed = Rails.fire(element, \"confirm:complete\", [answer]);\n    if (answer && completed) {\n      // Allow the event to propagate normally and re-dispatch it without\n      // the confirm data attribute which the Rails internal method is\n      // checking.\n      $(element).data(\"confirm\", null);\n      $(element).removeAttr(\"data-confirm\");\n\n      // The submit button click events won't do anything if they are\n      // dispatched as is. In these cases, just submit the underlying form.\n      if (ev.type === \"click\" &&\n        (\n          $(element).is('button[type=\"submit\"]') ||\n          $(element).is('input[type=\"submit\"]')\n        )\n      ) {\n        $(element).parents(\"form\").submit();\n      } else {\n        let origEv = ev.originalEvent || ev;\n        let newEv = origEv;\n        if (typeof Event === \"function\") {\n          // Clone the event because otherwise some click events may not\n          // work properly when re-dispatched.\n          newEv = new origEv.constructor(origEv.type, origEv);\n        }\n        ev.target.dispatchEvent(newEv);\n      }\n    }\n  });\n\n  return false;\n};\nconst handleConfirm = (ev, element) => {\n  if (!allowAction(ev, element)) {\n    Rails.stopEverything(ev);\n  }\n};\nconst getMatchingEventTarget = (ev, selector) => {\n  let target = ev.target;\n  while (!(!(target instanceof Element) || Rails.matches(target, selector))) {\n    target = target.parentNode;\n  }\n\n  if (target instanceof Element) {\n    return target;\n  }\n\n  return null;\n};\nconst handleDocumentEvent = (ev, matchSelectors) => {\n  return matchSelectors.some((currentSelector) => {\n    let target = getMatchingEventTarget(ev, currentSelector);\n    if (target === null) {\n      return false;\n    }\n\n    handleConfirm(ev, target);\n    return true;\n  });\n};\n\ndocument.addEventListener(\"click\", (ev) => {\n  return handleDocumentEvent(ev, [\n    Rails.linkClickSelector,\n    Rails.buttonClickSelector,\n    Rails.formInputClickSelector\n  ]);\n});\ndocument.addEventListener(\"change\", (ev) => {\n  return handleDocumentEvent(ev, [Rails.inputChangeSelector]);\n});\ndocument.addEventListener(\"submit\", (ev) => {\n  return handleDocumentEvent(ev, [Rails.formSubmitSelector]);\n});\n\n// This is needed for the confirm dialog to work with Foundation Abide.\n// Abide registers its own submit click listeners since Foundation 5.6.x\n// which will be handled before the document listeners above. This would\n// break the custom confirm functionality when used with Foundation Abide.\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  $(Rails.formInputClickSelector).on(\"click.confirm\", (ev) => {\n    handleConfirm(ev, getMatchingEventTarget(ev, Rails.formInputClickSelector));\n  });\n});\n"]},"metadata":{},"sourceType":"module"}