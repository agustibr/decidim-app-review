{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { DirectUpload } from \"@rails/activestorage\";\nexport var Uploader = /*#__PURE__*/function () {\n  function Uploader(modal, uploadItem, options) {\n    _classCallCheck(this, Uploader);\n\n    this.modal = modal;\n    this.uploadItem = uploadItem;\n    this.progressBar = uploadItem.querySelector(\".progress-bar\");\n    this.validationSent = false;\n    this.fileTooBig = false;\n\n    if (modal.options.maxFileSize && options.file.size > modal.options.maxFileSize) {\n      this.fileTooBig = true;\n      this.showError([modal.locales.file_size_too_large]);\n    } else {\n      this.upload = new DirectUpload(options.file, options.url, this);\n    }\n  }\n\n  _createClass(Uploader, [{\n    key: \"showError\",\n    value: function showError(errors) {\n      this.progressBar.classList.add(\"filled\");\n      this.progressBar.innerHTML = this.modal.locales.validation_error;\n      this.uploadItem.dataset.state = \"error\";\n      var errorList = this.uploadItem.querySelector(\".upload-errors\");\n      errors.forEach(function (error) {\n        var errorItem = document.createElement(\"li\");\n        errorItem.classList.add(\"form-error\", \"is-visible\");\n        errorItem.innerHTML = error;\n        errorList.appendChild(errorItem);\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(blobId) {\n      var _this = this;\n\n      var callback = function callback(data) {\n        var errors = [];\n\n        for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              value = _Object$entries$_i[1];\n\n          errors = errors.concat(value);\n        }\n\n        _this.progressBar.style.justifyContent = \"center\";\n\n        if (errors.length === 0) {\n          _this.progressBar.innerHTML = _this.modal.locales.uploaded;\n          _this.uploadItem.dataset.state = \"validated\";\n        } else {\n          _this.showError(errors);\n        }\n\n        _this.progressBar.classList.add(\"filled\");\n      };\n\n      if (!this.validationSent) {\n        var property = this.modal.options.addAttribute;\n\n        if (this.modal.options.titled) {\n          property = \"file\";\n        }\n\n        var params = new URLSearchParams({\n          resourceClass: this.modal.options.resourceClass,\n          property: property,\n          blob: blobId,\n          formClass: this.modal.options.formObjectClass\n        });\n        fetch(\"/upload_validations?\".concat(params.toString()), {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRF-Token\": $(\"meta[name=csrf-token]\").attr(\"content\")\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          callback(data);\n        });\n        this.validationSent = true;\n      }\n    }\n  }, {\n    key: \"directUploadWillStoreFileWithXHR\",\n    value: function directUploadWillStoreFileWithXHR(request) {\n      var _this2 = this;\n\n      request.upload.addEventListener(\"progress\", function (event) {\n        var progress = Math.floor(event.loaded / event.total * 100);\n        var width = \"15%\";\n\n        if (progress > 15) {\n          width = \"\".concat(progress, \"%\");\n        }\n\n        _this2.progressBar.style.width = width;\n\n        if (progress === 100) {\n          _this2.progressBar.innerHTML = _this2.modal.locales.validating;\n          return;\n        }\n\n        _this2.progressBar.innerHTML = \"\".concat(progress, \"%\");\n      });\n    }\n  }]);\n\n  return Uploader;\n}();","map":{"version":3,"mappings":"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","names":["DirectUpload","Uploader","modal","uploadItem","options","_classCallCheck","progressBar","querySelector","validationSent","fileTooBig","maxFileSize","file","size","showError","locales","file_size_too_large","upload","url","_createClass","key","value","errors","classList","add","innerHTML","validation_error","dataset","state","errorList","forEach","error","errorItem","document","createElement","appendChild","blobId","callback","data","Object","entries","concat","_this","style","justifyContent","length","uploaded","property","addAttribute","titled","params","URLSearchParams","resourceClass","blob","formClass","formObjectClass","fetch","toString","method","headers","$","attr","then","response","json","request","addEventListener","event","progress","Math","floor","loaded","total","width","_this2","validating"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/direct_uploads/uploader.js"],"sourcesContent":["import { DirectUpload } from \"@rails/activestorage\";\n\nexport class Uploader {\n  constructor(modal, uploadItem, options) {\n    this.modal = modal;\n    this.uploadItem = uploadItem;\n    this.progressBar = uploadItem.querySelector(\".progress-bar\");\n    this.validationSent = false;\n    this.fileTooBig = false;\n    if (modal.options.maxFileSize && options.file.size > modal.options.maxFileSize) {\n      this.fileTooBig = true;\n      this.showError([modal.locales.file_size_too_large]);\n    } else {\n      this.upload = new DirectUpload(options.file, options.url, this);\n    }\n  }\n\n  showError(errors) {\n    this.progressBar.classList.add(\"filled\");\n    this.progressBar.innerHTML = this.modal.locales.validation_error;\n    this.uploadItem.dataset.state = \"error\";\n    const errorList = this.uploadItem.querySelector(\".upload-errors\");\n    errors.forEach((error) => {\n      const errorItem = document.createElement(\"li\");\n      errorItem.classList.add(\"form-error\", \"is-visible\");\n      errorItem.innerHTML = error;\n      errorList.appendChild(errorItem);\n    })\n  }\n\n  validate(blobId) {\n    const callback = (data) => {\n      let errors = []\n      for (const [, value] of Object.entries(data)) {\n        errors = errors.concat(value);\n      }\n\n      this.progressBar.style.justifyContent = \"center\";\n      if (errors.length === 0) {\n        this.progressBar.innerHTML = this.modal.locales.uploaded;\n        this.uploadItem.dataset.state = \"validated\";\n      } else {\n        this.showError(errors);\n      }\n      this.progressBar.classList.add(\"filled\");\n    }\n\n    if (!this.validationSent) {\n      let property = this.modal.options.addAttribute;\n      if (this.modal.options.titled) {\n        property = \"file\"\n      }\n      const params = new URLSearchParams({\n        resourceClass: this.modal.options.resourceClass,\n        property: property,\n        blob: blobId,\n        formClass: this.modal.options.formObjectClass\n      });\n\n      fetch(`/upload_validations?${params.toString()}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRF-Token\": $(\"meta[name=csrf-token]\").attr(\"content\")\n        }\n      }).then((response) => response.json()).then((data) => {\n        callback(data);\n      });\n      this.validationSent = true;\n    }\n  }\n\n  directUploadWillStoreFileWithXHR(request) {\n    request.upload.addEventListener(\"progress\", (event) => {\n      const progress = Math.floor(event.loaded / event.total * 100);\n      let width = \"15%\";\n      if (progress > 15) {\n        width = `${progress}%`;\n      }\n      this.progressBar.style.width = width;\n\n      if (progress === 100) {\n        this.progressBar.innerHTML = this.modal.locales.validating;\n        return;\n      }\n      this.progressBar.innerHTML = `${progress}%`;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}