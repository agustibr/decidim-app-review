{"ast":null,"code":"import \"src/decidim/geocoding\";\nimport formatAddress from \"src/decidim/geocoding/format_address\";\n/**\n * For the available address format keys, refer to:\n * https://github.com/komoot/photon\n */\n\n$(function () {\n  var generateAddressLabel = formatAddress;\n  $(\"[data-decidim-geocoding]\").each(function (_i, el) {\n    var $input = $(el);\n    var config = $input.data(\"decidim-geocoding\");\n    var queryMinLength = config.queryMinLength || 2; // Default Photon installation only supports these languages but for\n    // custom instances, you can configure the supported languages.\n\n    var supportedLanguages = config.supportedLanguages || [\"de\", \"en\", \"it\", \"fr\"];\n    var defaultLanguage = config.defaultLanguage || \"en\";\n    var addressFormat = config.addressFormat || [\"name\", [\"street\", \"housenumber\"], \"postcode\", \"city\", \"state\", \"country\"];\n    var language = $(\"html\").attr(\"lang\");\n\n    if (!supportedLanguages.includes(language)) {\n      language = defaultLanguage;\n    }\n\n    var currentSuggestionQuery = null;\n\n    if (!config.url || config.url.length < 1) {\n      return;\n    }\n\n    $input.on(\"geocoder-suggest.decidim\", function (_ev, query, callback) {\n      clearTimeout(currentSuggestionQuery); // Do not trigger API calls on short queries\n\n      if (\"\".concat(query).trim().length < queryMinLength) {\n        return;\n      }\n\n      currentSuggestionQuery = setTimeout(function () {\n        $.ajax({\n          method: \"GET\",\n          url: config.url,\n          data: {\n            q: query,\n            // eslint-disable-line\n            lang: language\n          },\n          dataType: \"json\"\n        }).done(function (resp) {\n          if (resp.features) {\n            return callback(resp.features.map(function (item) {\n              var label = generateAddressLabel(item.properties, addressFormat);\n              return {\n                key: label,\n                value: label,\n                coordinates: item.geometry.coordinates\n              };\n            }));\n          }\n\n          return null;\n        });\n      }, 200);\n    });\n  });\n});","map":{"version":3,"mappings":"AAAA,OAAO,uBAAP;AACA,OAAOA,aAAP,MAA0B,sCAA1B;AAEA;AACA;AACA;AACA;;AACAC,CAAC,CAAC,YAAM;EACN,IAAMC,oBAAoB,GAAGF,aAA7B;EAEAC,CAAC,CAAC,0BAAD,CAADA,CAA8BE,IAA9BF,CAAmC,UAACG,EAAD,EAAKC,EAAL,EAAY;IAC7C,IAAMC,MAAM,GAAGL,CAAC,CAACI,EAAD,CAAhB;IACA,IAAME,MAAM,GAAGD,MAAM,CAACE,IAAPF,CAAY,mBAAZA,CAAf;IACA,IAAMG,cAAc,GAAGF,MAAM,CAACE,cAAPF,IAAyB,CAAhD,CAH6C,CAI7C;IACA;;IACA,IAAMG,kBAAkB,GAAGH,MAAM,CAACG,kBAAPH,IAA6B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAxD;IACA,IAAMI,eAAe,GAAIJ,MAAM,CAACI,eAAPJ,IAA0B,IAAnD;IACA,IAAMK,aAAa,GAAGL,MAAM,CAACK,aAAPL,IAAwB,CAC5C,MAD4C,EAE5C,CAAC,QAAD,EAAW,aAAX,CAF4C,EAG5C,UAH4C,EAI5C,MAJ4C,EAK5C,OAL4C,EAM5C,SAN4C,CAA9C;IAQA,IAAIM,QAAQ,GAAGZ,CAAC,CAAC,MAAD,CAADA,CAAUa,IAAVb,CAAe,MAAfA,CAAf;;IACA,IAAI,CAACS,kBAAkB,CAACK,QAAnBL,CAA4BG,QAA5BH,CAAL,EAA4C;MAC1CG,QAAQ,GAAGF,eAAXE;IACD;;IACD,IAAIG,sBAAsB,GAAG,IAA7B;;IAEA,IAAI,CAACT,MAAM,CAACU,GAAR,IAAeV,MAAM,CAACU,GAAPV,CAAWW,MAAXX,GAAoB,CAAvC,EAA0C;MACxC;IACD;;IAEDD,MAAM,CAACa,EAAPb,CAAU,0BAAVA,EAAsC,UAACc,GAAD,EAAMC,KAAN,EAAaC,QAAb,EAA0B;MAC9DC,YAAY,CAACP,sBAAD,CAAZO,CAD8D,CAG9D;;MACA,IAAI,UAAGF,KAAH,EAAWG,IAAX,GAAkBN,MAAlB,GAA2BT,cAA/B,EAA+C;QAC7C;MACD;;MAEDO,sBAAsB,GAAGS,UAAU,CAAC,YAAM;QACxCxB,CAAC,CAACyB,IAAFzB,CAAO;UACL0B,MAAM,EAAE,KADH;UAELV,GAAG,EAAEV,MAAM,CAACU,GAFP;UAGLT,IAAI,EAAE;YACJoB,CAAC,EAAEP,KADC;YACM;YACVQ,IAAI,EAAEhB;UAFF,CAHD;UAOLiB,QAAQ,EAAE;QAPL,CAAP7B,EAQG8B,IARH9B,CAQQ,UAAC+B,IAAD,EAAU;UAChB,IAAIA,IAAI,CAACC,QAAT,EAAmB;YACjB,OAAOX,QAAQ,CAACU,IAAI,CAACC,QAALD,CAAcE,GAAdF,CAAkB,UAACG,IAAD,EAAU;cAC1C,IAAMC,KAAK,GAAGlC,oBAAoB,CAACiC,IAAI,CAACE,UAAN,EAAkBzB,aAAlB,CAAlC;cAEA,OAAO;gBACL0B,GAAG,EAAEF,KADA;gBAELG,KAAK,EAAEH,KAFF;gBAGLI,WAAW,EAAEL,IAAI,CAACM,QAALN,CAAcK;cAHtB,CAAP;YAHc,EAAD,CAAf;UASD;;UACD,OAAO,IAAP;QApBF;MADiC,GAuBhC,GAvBgC,CAAnCxB;IARF;EA1BF;AAHD,EAADf","names":["formatAddress","$","generateAddressLabel","each","_i","el","$input","config","data","queryMinLength","supportedLanguages","defaultLanguage","addressFormat","language","attr","includes","currentSuggestionQuery","url","length","on","_ev","query","callback","clearTimeout","trim","setTimeout","ajax","method","q","lang","dataType","done","resp","features","map","item","label","properties","key","value","coordinates","geometry"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/geocoding/provider/photon.js"],"sourcesContent":["import \"src/decidim/geocoding\"\nimport formatAddress from \"src/decidim/geocoding/format_address\"\n\n/**\n * For the available address format keys, refer to:\n * https://github.com/komoot/photon\n */\n$(() => {\n  const generateAddressLabel = formatAddress;\n\n  $(\"[data-decidim-geocoding]\").each((_i, el) => {\n    const $input = $(el);\n    const config = $input.data(\"decidim-geocoding\");\n    const queryMinLength = config.queryMinLength || 2;\n    // Default Photon installation only supports these languages but for\n    // custom instances, you can configure the supported languages.\n    const supportedLanguages = config.supportedLanguages || [\"de\", \"en\", \"it\", \"fr\"];\n    const defaultLanguage  = config.defaultLanguage || \"en\";\n    const addressFormat = config.addressFormat || [\n      \"name\",\n      [\"street\", \"housenumber\"],\n      \"postcode\",\n      \"city\",\n      \"state\",\n      \"country\"\n    ];\n    let language = $(\"html\").attr(\"lang\");\n    if (!supportedLanguages.includes(language)) {\n      language = defaultLanguage;\n    }\n    let currentSuggestionQuery = null;\n\n    if (!config.url || config.url.length < 1) {\n      return;\n    }\n\n    $input.on(\"geocoder-suggest.decidim\", (_ev, query, callback) => {\n      clearTimeout(currentSuggestionQuery);\n\n      // Do not trigger API calls on short queries\n      if (`${query}`.trim().length < queryMinLength) {\n        return;\n      }\n\n      currentSuggestionQuery = setTimeout(() => {\n        $.ajax({\n          method: \"GET\",\n          url: config.url,\n          data: {\n            q: query, // eslint-disable-line\n            lang: language\n          },\n          dataType: \"json\"\n        }).done((resp) => {\n          if (resp.features) {\n            return callback(resp.features.map((item) => {\n              const label = generateAddressLabel(item.properties, addressFormat);\n\n              return {\n                key: label,\n                value: label,\n                coordinates: item.geometry.coordinates\n              }\n            }));\n          }\n          return null;\n        });\n      }, 200);\n    });\n  })\n});\n"]},"metadata":{},"sourceType":"module"}