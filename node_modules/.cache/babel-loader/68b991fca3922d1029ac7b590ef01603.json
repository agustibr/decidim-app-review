{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable require-jsdoc */\n\n\nimport attributeDiff from \"src/decidim/editor/attribute_diff\";\nvar Delta = Quill[\"import\"](\"delta\");\n\nvar previousChar = function previousChar(quill, range) {\n  return quill.getText(range.index - 1, 1);\n};\n\nvar beforePreviousChar = function beforePreviousChar(quill, range) {\n  return quill.getText(range.index - 2, 1);\n};\n\nvar nextChar = function nextChar(quill, range) {\n  return quill.getText(range.index, 1);\n};\n\nvar handleListSelection = function handleListSelection(quill, range) {\n  var lastCharacterOfPreviousLine = quill.getText(range.index - 3, 1);\n\n  if (nextChar(quill, range) === \"\\n\" || lastCharacterOfPreviousLine !== \"\\n\") {\n    quill.setSelection(range.index - 1, Quill.sources.SILENT);\n  } else {\n    quill.setSelection(range.index - 3, Quill.sources.SILENT);\n  }\n};\n\nvar moveSelectionToPreviousLine = function moveSelectionToPreviousLine(quill, range) {\n  var lastCharacterOfPreviousLine = quill.getText(range.index - 3, 1);\n\n  if (nextChar(quill, range) === \"\\n\" || lastCharacterOfPreviousLine !== \"\\n\") {\n    quill.setSelection(range.index - 1, Quill.sources.SILENT);\n  } else {\n    quill.setSelection(range.index - 3, Quill.sources.SILENT);\n  }\n};\n\nexport default function backspaceBindings(quill) {\n  quill.keyboard.addBinding({\n    key: 8,\n    offset: 1,\n    collapsed: true\n  }, function (range, context) {\n    var length = 1;\n\n    if (/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix)) {\n      length = 2;\n    }\n\n    if (range.index === 0 || quill.getLength() <= 1) {\n      return;\n    }\n\n    var formats = {};\n\n    var _quill$getLine = quill.getLine(range.index),\n        _quill$getLine2 = _slicedToArray(_quill$getLine, 1),\n        line = _quill$getLine2[0];\n\n    var delta = new Delta().retain(range.index - length)[\"delete\"](length);\n\n    if (context.offset === 1 && previousChar(quill, range) === \"\\n\") {\n      var _quill$getLine3 = quill.getLine(range.index - 2),\n          _quill$getLine4 = _slicedToArray(_quill$getLine3, 1),\n          prev = _quill$getLine4[0];\n\n      if (prev && prev.statics.blotName === \"list-item\") {\n        formats = handleListSelection(quill, range);\n\n        if (prev !== null && prev.length() > 1) {\n          var curFormats = line.formats();\n          var prevFormats = quill.getFormat(range.index - 2, 1);\n          formats = attributeDiff(curFormats, prevFormats) || {};\n          length += 1;\n        }\n\n        delta = new Delta().retain(range.index - 2)[\"delete\"](2);\n        moveSelectionToPreviousLine(quill, range);\n      } else {\n        delta = new Delta().retain(range.index - 1)[\"delete\"](1);\n\n        if (range.index < 2) {\n          delta = new Delta()[\"delete\"](1).retain(range.index + line.length() - 1);\n        } else if (previousChar(quill, range) === \"\\n\" && beforePreviousChar(quill, range) === \"\\n\") {\n          delta = new Delta().retain(range.index - 2)[\"delete\"](2);\n        }\n      }\n    } else {\n      var _quill$getLine5 = quill.getLine(range.index - 1),\n          _quill$getLine6 = _slicedToArray(_quill$getLine5, 1),\n          _prev = _quill$getLine6[0];\n\n      if (_prev) {\n        var isPrevLineEmpty = _prev.statics.blotName === \"block\" && _prev.length() <= 1;\n\n        if (!isPrevLineEmpty) {\n          var _curFormats = line.formats();\n\n          var _prevFormats = quill.getFormat(range.index - 1, 1);\n\n          formats = attributeDiff(_curFormats, _prevFormats) || {};\n\n          if (Object.keys(formats).length > 0) {\n            // line.length() - 1 targets \\n in line, another -1 for newline being deleted\n            var formatDelta = new Delta().retain(range.index + line.length() - 2).retain(1, formats);\n            delta = delta.compose(formatDelta);\n          }\n        }\n      }\n    }\n\n    quill.updateContents(delta, Quill.sources.USER);\n\n    if (Object.keys(formats).length > 0) {\n      quill.formatLine(range.index - length, length, formats, Quill.sources.USER);\n    }\n\n    quill.focus();\n  }); // Put this backspace binding to second\n\n  quill.keyboard.bindings[8].splice(1, 0, quill.keyboard.bindings[8].pop());\n}","map":{"version":3,"mappings":"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","names":["attributeDiff","Delta","Quill","previousChar","quill","range","getText","index","beforePreviousChar","nextChar","handleListSelection","lastCharacterOfPreviousLine","setSelection","sources","SILENT","moveSelectionToPreviousLine","backspaceBindings","keyboard","addBinding","key","offset","collapsed","context","length","test","prefix","getLength","formats","getLine","line","delta","retain","prev","statics","blotName","curFormats","prevFormats","getFormat","isPrevLineEmpty","Object","keys","formatDelta","compose","updateContents","USER","formatLine","focus","bindings","splice","pop"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/editor/modified_backspace_offset1.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nimport attributeDiff from \"src/decidim/editor/attribute_diff\"\n\nconst Delta = Quill.import(\"delta\");\n\nconst previousChar = (quill, range) => {\n  return quill.getText(range.index - 1, 1);\n}\n\nconst beforePreviousChar = (quill, range) => {\n  return quill.getText(range.index - 2, 1);\n}\n\nconst nextChar = (quill, range) => {\n  return quill.getText(range.index, 1);\n}\n\nconst handleListSelection = (quill, range) => {\n  const lastCharacterOfPreviousLine = quill.getText(range.index - 3, 1);\n  if (nextChar(quill, range) === \"\\n\" || lastCharacterOfPreviousLine !== \"\\n\") {\n    quill.setSelection(range.index - 1, Quill.sources.SILENT);\n  } else {\n    quill.setSelection(range.index - 3, Quill.sources.SILENT);\n  }\n}\n\nconst moveSelectionToPreviousLine = (quill, range) => {\n  const lastCharacterOfPreviousLine = quill.getText(range.index - 3, 1);\n  if (nextChar(quill, range) === \"\\n\" || lastCharacterOfPreviousLine !== \"\\n\") {\n    quill.setSelection(range.index - 1, Quill.sources.SILENT);\n  } else {\n    quill.setSelection(range.index - 3, Quill.sources.SILENT);\n  }\n}\n\nexport default function backspaceBindings(quill) {\n  quill.keyboard.addBinding({ key: 8, offset: 1, collapsed: true }, (range, context) => {\n    let length = 1\n    if ((/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/).test(context.prefix)) {\n      length = 2;\n    }\n\n    if (range.index === 0 || quill.getLength() <= 1) {\n      return;\n    }\n    let formats = {};\n    const [line] = quill.getLine(range.index);\n    let delta = new Delta().retain(range.index - length).delete(length);\n    if (context.offset === 1 && previousChar(quill, range) === \"\\n\") {\n      const [prev] = quill.getLine(range.index - 2);\n      if (prev && prev.statics.blotName === \"list-item\") {\n        formats = handleListSelection(quill, range);\n        if (prev !== null && prev.length() > 1) {\n          let curFormats = line.formats();\n          let prevFormats = quill.getFormat(range.index - 2, 1);\n          formats = attributeDiff(curFormats, prevFormats) || {};\n          length += 1;\n        }\n        delta = new Delta().retain(range.index - 2).delete(2);\n        moveSelectionToPreviousLine(quill, range);\n      } else {\n        delta = new Delta().retain(range.index - 1).delete(1);\n        if (range.index < 2) {\n          delta = new Delta().delete(1).retain(range.index + line.length() - 1);\n        } else if (previousChar(quill, range) === \"\\n\" && beforePreviousChar(quill, range) === \"\\n\") {\n          delta = new Delta().retain(range.index - 2).delete(2);\n        }\n      }\n    } else {\n      const [prev] = quill.getLine(range.index - 1);\n      if (prev) {\n        const isPrevLineEmpty =\n          prev.statics.blotName === \"block\" && prev.length() <= 1;\n        if (!isPrevLineEmpty) {\n          const curFormats = line.formats();\n          const prevFormats = quill.getFormat(range.index - 1, 1);\n          formats = attributeDiff(curFormats, prevFormats) || {};\n          if (Object.keys(formats).length > 0) {\n            // line.length() - 1 targets \\n in line, another -1 for newline being deleted\n            const formatDelta = new Delta().retain(range.index + line.length() - 2).retain(1, formats);\n            delta = delta.compose(formatDelta);\n          }\n        }\n      }\n    }\n    quill.updateContents(delta, Quill.sources.USER);\n    if (Object.keys(formats).length > 0) {\n      quill.formatLine(range.index - length, length, formats, Quill.sources.USER);\n    }\n    quill.focus();\n  });\n\n  // Put this backspace binding to second\n  quill.keyboard.bindings[8].splice(1, 0, quill.keyboard.bindings[8].pop());\n}\n"]},"metadata":{},"sourceType":"module"}