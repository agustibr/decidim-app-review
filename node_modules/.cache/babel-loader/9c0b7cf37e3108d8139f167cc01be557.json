{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n} // check if the browser supports serviceWorker at all\n\n\nwindow.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var registration;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(\"serviceWorker\" in navigator)) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 3;\n          return navigator.serviceWorker.register(\"/sw.js\", {\n            scope: \"/\"\n          });\n\n        case 3:\n          registration = _context.sent;\n          _context.next = 7;\n          break;\n\n        case 6:\n          console.log(\"Your browser doesn't support service workers 🤷‍♀️\");\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;AACAA,MAAM,CAACC,gBAAPD,CAAwB,MAAxBA,wEAAgC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,MAC1B,mBAAmBE,SADO;YAAAC;YAAA;UAAA;;UAAAA;UAAA,OAGDD,SAAS,CAACE,aAAVF,CAAwBG,QAAxBH,CAAiC,QAAjCA,EAA2C;YAAEI,KAAK,EAAE;UAAT,CAA3CJ,CAHC;;QAAA;UAGtBK,YAHsB,gBAGtBA;UAHsBJ;UAAA;;QAAA;UAK5BK,OAAO,CAACC,GAARD,CAAY,oDAAZA;;QAL4B;QAAA;UAAA;MAAA;IAAA;EAAA;AAAhC","names":["window","addEventListener","navigator","_context","serviceWorker","register","scope","registration","console","log"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/sw/loader.js"],"sourcesContent":["// check if the browser supports serviceWorker at all\nwindow.addEventListener(\"load\", async () => {\n  if (\"serviceWorker\" in navigator) {\n    // eslint-disable-next-line no-unused-vars\n    const registration = await navigator.serviceWorker.register(\"/sw.js\", { scope: \"/\" });\n  } else {\n    console.log(\"Your browser doesn't support service workers 🤷‍♀️\");\n  }\n});\n"]},"metadata":{},"sourceType":"module"}