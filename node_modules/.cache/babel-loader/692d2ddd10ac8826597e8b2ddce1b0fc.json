{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar CONTROLLER_REGISTRY = {};\n\nvar MapControllerRegistry = /*#__PURE__*/function () {\n  function MapControllerRegistry() {\n    _classCallCheck(this, MapControllerRegistry);\n  }\n\n  _createClass(MapControllerRegistry, null, [{\n    key: \"getController\",\n    value: function getController(mapId) {\n      return CONTROLLER_REGISTRY[mapId];\n    }\n  }, {\n    key: \"setController\",\n    value: function setController(mapId, map) {\n      CONTROLLER_REGISTRY[mapId] = map;\n    }\n  }, {\n    key: \"findByMap\",\n    value: function findByMap(map) {\n      return Object.values(CONTROLLER_REGISTRY).find(function (ctrl) {\n        return ctrl.getMap() === map;\n      });\n    }\n  }]);\n\n  return MapControllerRegistry;\n}();\n\nexport { MapControllerRegistry as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,mBAAmB,GAAG,EAA5B;;IAEqBC,qB;;;;;;;WACnB,uBAAqBC,KAArB,EAA4B;MAC1B,OAAOF,mBAAmB,CAACE,KAAD,CAA1B;IACD;;;WAED,uBAAqBA,KAArB,EAA4BC,GAA5B,EAAiC;MAC/BH,mBAAmB,CAACE,KAAD,CAAnBF,GAA6BG,GAA7BH;IACD;;;WAED,mBAAiBG,GAAjB,EAAsB;MACpB,OAAOC,MAAM,CAACC,MAAPD,CAAcJ,mBAAdI,EAAmCE,IAAnCF,CAAwC,UAACG,IAAD,EAAU;QACvD,OAAOA,IAAI,CAACC,MAALD,OAAkBJ,GAAzB;MADK,EAAP;IAGD;;;;;;SAbkBF,qB","names":["CONTROLLER_REGISTRY","MapControllerRegistry","mapId","map","Object","values","find","ctrl","getMap"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/map/controller_registry.js"],"sourcesContent":["const CONTROLLER_REGISTRY = {};\n\nexport default class MapControllerRegistry {\n  static getController(mapId) {\n    return CONTROLLER_REGISTRY[mapId];\n  }\n\n  static setController(mapId, map) {\n    CONTROLLER_REGISTRY[mapId] = map;\n  }\n\n  static findByMap(map) {\n    return Object.values(CONTROLLER_REGISTRY).find((ctrl) => {\n      return ctrl.getMap() === map;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}