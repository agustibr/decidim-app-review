{"ast":null,"code":"/* eslint-disable multiline-ternary, no-ternary */\n\n/*\n *\n * This is used to make sure users are redirected to\n * the expected URL after sign in.\n *\n * When a button or link trigger a login modal we capture\n * the event and inject the URL where the user should\n * be redirected after sign in (the redirect_url param).\n *\n * The code is injected to any form or link in the modal\n * and when the modal is closed we remove the injected\n * code.\n *\n * In order for this to work the button or link must have\n * a data-open attribute with the ID of the modal to open\n * and a data-redirect-url attribute with the URL to redirect\n * the user. If any of this is missing no code will be\n * injected.\n *\n */\n$(function () {\n  var removeUrlParameter = function removeUrlParameter(url, parameter) {\n    var urlParts = url.split(\"?\");\n\n    if (urlParts.length >= 2) {\n      // Get first part, and remove from array\n      var urlBase = urlParts.shift(); // Join it back up\n\n      var queryString = urlParts.join(\"?\");\n      var prefix = \"\".concat(encodeURIComponent(parameter), \"=\");\n      var parts = queryString.split(/[&;]/g); // Reverse iteration as may be destructive\n\n      for (var index = parts.length - 1; index >= 0; index -= 1) {\n        // Idiom for string.startsWith\n        if (parts[index].lastIndexOf(prefix, 0) !== -1) {\n          parts.splice(index, 1);\n        }\n      }\n\n      if (parts.length === 0) {\n        return urlBase;\n      }\n\n      return \"\".concat(urlBase, \"?\").concat(parts.join(\"&\"));\n    }\n\n    return url;\n  };\n\n  $(document).on(\"click.zf.trigger\", function (event) {\n    var target = \"#\".concat($(event.target).data(\"open\"));\n    var redirectUrl = $(event.target).data(\"redirectUrl\");\n\n    if (target && redirectUrl) {\n      $(\"<input type='hidden' />\").attr(\"id\", \"redirect_url\").attr(\"name\", \"redirect_url\").attr(\"value\", redirectUrl).appendTo(\"\".concat(target, \" form\"));\n      $(\"\".concat(target, \" a\")).attr(\"href\", function (index, href) {\n        var querystring = jQuery.param({\n          \"redirect_url\": redirectUrl\n        });\n        return href + (href.match(/\\?/) ? \"&\" : \"?\") + querystring;\n      });\n    }\n  });\n  $(document).on(\"closed.zf.reveal\", function (event) {\n    $(\"#redirect_url\", event.target).remove();\n    $(\"a\", event.target).attr(\"href\", function (index, href) {\n      if (href && href.indexOf(\"redirect_url\") !== -1) {\n        return removeUrlParameter(href, \"redirect_url\");\n      }\n\n      return href;\n    });\n  });\n});","map":{"version":3,"mappings":"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","names":["$","removeUrlParameter","url","parameter","urlParts","split","length","urlBase","shift","queryString","join","prefix","encodeURIComponent","parts","index","lastIndexOf","splice","document","on","event","target","data","redirectUrl","attr","appendTo","href","querystring","jQuery","param","match","remove","indexOf"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/append_redirect_url_to_modals.js"],"sourcesContent":["/* eslint-disable multiline-ternary, no-ternary */\n\n/*\n *\n * This is used to make sure users are redirected to\n * the expected URL after sign in.\n *\n * When a button or link trigger a login modal we capture\n * the event and inject the URL where the user should\n * be redirected after sign in (the redirect_url param).\n *\n * The code is injected to any form or link in the modal\n * and when the modal is closed we remove the injected\n * code.\n *\n * In order for this to work the button or link must have\n * a data-open attribute with the ID of the modal to open\n * and a data-redirect-url attribute with the URL to redirect\n * the user. If any of this is missing no code will be\n * injected.\n *\n */\n$(() => {\n  const removeUrlParameter = (url, parameter) => {\n    const urlParts = url.split(\"?\");\n\n    if (urlParts.length >= 2) {\n      // Get first part, and remove from array\n      const urlBase = urlParts.shift();\n\n      // Join it back up\n      const queryString = urlParts.join(\"?\");\n\n      const prefix = `${encodeURIComponent(parameter)}=`;\n      const parts = queryString.split(/[&;]/g);\n\n      // Reverse iteration as may be destructive\n      for (let index = parts.length - 1; index >= 0; index -= 1) {\n        // Idiom for string.startsWith\n        if (parts[index].lastIndexOf(prefix, 0) !== -1) {\n          parts.splice(index, 1);\n        }\n      }\n\n      if (parts.length === 0) {\n        return urlBase;\n      }\n\n      return `${urlBase}?${parts.join(\"&\")}`;\n    }\n\n    return url;\n  }\n\n  $(document).on(\"click.zf.trigger\", (event) => {\n    const target = `#${$(event.target).data(\"open\")}`;\n    const redirectUrl = $(event.target).data(\"redirectUrl\");\n\n    if (target && redirectUrl) {\n      $(\"<input type='hidden' />\").\n        attr(\"id\", \"redirect_url\").\n        attr(\"name\", \"redirect_url\").\n        attr(\"value\", redirectUrl).\n        appendTo(`${target} form`);\n\n      $(`${target} a`).attr(\"href\", (index, href) => {\n        const querystring = jQuery.param({\"redirect_url\": redirectUrl});\n        return href + (href.match(/\\?/) ? \"&\" : \"?\") + querystring;\n      });\n    }\n  });\n\n  $(document).on(\"closed.zf.reveal\", (event) => {\n    $(\"#redirect_url\", event.target).remove();\n    $(\"a\", event.target).attr(\"href\", (index, href) => {\n      if (href && href.indexOf(\"redirect_url\") !== -1) {\n        return removeUrlParameter(href, \"redirect_url\");\n      }\n\n      return href;\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}