{"ast":null,"code":"import dayjs from \"dayjs\";\n$(function () {\n  var $impersonationWarning = $(\".impersonation-warning\");\n\n  if ($impersonationWarning.length) {\n    var endsAt = dayjs($impersonationWarning.data(\"session-ends-at\"));\n    var exitInterval = setInterval(function () {\n      var diff = (endsAt - dayjs()) / 60000;\n      var diffInMinutes = Math.round(diff);\n      $impersonationWarning.find(\".minutes\").html(diffInMinutes);\n\n      if (diff <= 0) {\n        window.location.reload();\n      }\n    }, 1000); // Prevent reload when page is already unloading, otherwise it may cause infinite reloads.\n\n    window.addEventListener(\"beforeunload\", function () {\n      clearInterval(exitInterval);\n      return;\n    });\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAC,CAAC,CAAC,YAAM;EACN,IAAMC,qBAAqB,GAAGD,CAAC,CAAC,wBAAD,CAA/B;;EACA,IAAIC,qBAAqB,CAACC,MAA1B,EAAkC;IAChC,IAAMC,MAAM,GAAGJ,KAAK,CAACE,qBAAqB,CAACG,IAAtBH,CAA2B,iBAA3BA,CAAD,CAApB;IACA,IAAMI,YAAY,GAAGC,WAAW,CAAC,YAAM;MACrC,IAAMC,IAAI,GAAG,CAACJ,MAAM,GAAGJ,KAAK,EAAf,IAAqB,KAAlC;MACA,IAAMS,aAAa,GAAGC,IAAI,CAACC,KAALD,CAAWF,IAAXE,CAAtB;MACAR,qBAAqB,CAACU,IAAtBV,CAA2B,UAA3BA,EAAuCW,IAAvCX,CAA4CO,aAA5CP;;MAEA,IAAIM,IAAI,IAAI,CAAZ,EAAe;QACbM,MAAM,CAACC,QAAPD,CAAgBE,MAAhBF;MACD;IAP6B,GAQ7B,IAR6B,CAAhC,CAFgC,CAYhC;;IACAA,MAAM,CAACG,gBAAPH,CAAwB,cAAxBA,EAAwC,YAAM;MAC5CI,aAAa,CAACZ,YAAD,CAAbY;MACA;IAFF;EAID;AAnBF,EAADjB","names":["dayjs","$","$impersonationWarning","length","endsAt","data","exitInterval","setInterval","diff","diffInMinutes","Math","round","find","html","window","location","reload","addEventListener","clearInterval"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/impersonation.js"],"sourcesContent":["import dayjs from \"dayjs\"\n\n$(() => {\n  const $impersonationWarning = $(\".impersonation-warning\");\n  if ($impersonationWarning.length) {\n    const endsAt = dayjs($impersonationWarning.data(\"session-ends-at\"));\n    const exitInterval = setInterval(() => {\n      const diff = (endsAt - dayjs()) / 60000;\n      const diffInMinutes = Math.round(diff);\n      $impersonationWarning.find(\".minutes\").html(diffInMinutes);\n\n      if (diff <= 0) {\n        window.location.reload();\n      }\n    }, 1000);\n\n    // Prevent reload when page is already unloading, otherwise it may cause infinite reloads.\n    window.addEventListener(\"beforeunload\", () => {\n      clearInterval(exitInterval);\n      return;\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"module"}