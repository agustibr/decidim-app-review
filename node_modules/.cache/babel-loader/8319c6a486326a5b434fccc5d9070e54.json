{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n\n/**\n * A plain Javascript component that handles the comments.\n *\n * @class\n * @augments Component\n */\n// This is necessary for testing purposes\n\n\nvar $ = window.$;\nimport { createCharacterCounter } from \"src/decidim/input_character_counter\";\nimport ExternalLink from \"src/decidim/external_link\";\nimport updateExternalDomainLinks from \"src/decidim/external_domain_warning\";\n\nvar CommentsComponent = /*#__PURE__*/function () {\n  function CommentsComponent($element, config) {\n    _classCallCheck(this, CommentsComponent);\n\n    this.$element = $element;\n    this.commentableGid = config.commentableGid;\n    this.commentsUrl = config.commentsUrl;\n    this.rootDepth = config.rootDepth;\n    this.order = config.order;\n    this.lastCommentId = config.lastCommentId;\n    this.pollingInterval = config.pollingInterval || 15000;\n    this.id = this.$element.attr(\"id\") || this._getUID();\n    this.mounted = false;\n  }\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n\n\n  _createClass(CommentsComponent, [{\n    key: \"mountComponent\",\n    value: function mountComponent() {\n      var _this = this;\n\n      if (this.$element.length > 0 && !this.mounted) {\n        this.mounted = true;\n\n        this._initializeComments(this.$element);\n\n        $(\".order-by__dropdown .is-submenu-item a\", this.$element).on(\"click.decidim-comments\", function () {\n          return _this._onInitOrder();\n        });\n      }\n    }\n    /**\n     * Handles the logic for unmounting the component\n     * @public\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"unmountComponent\",\n    value: function unmountComponent() {\n      var _this2 = this;\n\n      if (this.mounted) {\n        this.mounted = false;\n\n        this._stopPolling();\n\n        $(\".add-comment .opinion-toggle .button\", this.$element).off(\"click.decidim-comments\");\n        $(\".add-comment textarea\", this.$element).off(\"input.decidim-comments\");\n        $(\".order-by__dropdown .is-submenu-item a\", this.$element).off(\"click.decidim-comments\");\n        $(\".add-comment form\", this.$element).off(\"submit.decidim-comments\");\n        $(\".add-comment textarea\", this.$element).each(function (_i, el) {\n          return el.removeEventListener(\"emoji.added\", _this2._onTextInput);\n        });\n      }\n    }\n    /**\n     * Adds a new thread to the comments section.\n     * @public\n     * @param {String} threadHtml - The HTML content for the thread.\n     * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n     *   herself was the author of the new thread. Defaults to false.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"addThread\",\n    value: function addThread(threadHtml) {\n      var fromCurrentUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var $parent = $(\".comments:first\", this.$element);\n      var $comment = $(threadHtml);\n      var $threads = $(\".comment-threads\", this.$element);\n\n      this._addComment($threads, $comment);\n\n      this._finalizeCommentCreation($parent, fromCurrentUser);\n    }\n    /**\n     * Adds a new reply to an existing comment.\n     * @public\n     * @param {Number} commentId - The ID of the comment for which to add the\n     *   reply to.\n     * @param {String} replyHtml - The HTML content for the reply.\n     * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n     *   herself was the author of the new reply. Defaults to false.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"addReply\",\n    value: function addReply(commentId, replyHtml) {\n      var fromCurrentUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var $parent = $(\"#comment_\".concat(commentId));\n      var $comment = $(replyHtml);\n      var $replies = $(\"#comment-\".concat(commentId, \"-replies\"));\n\n      this._addComment($replies, $comment);\n\n      $replies.siblings(\".comment__additionalreply\").removeClass(\"hide\");\n\n      this._finalizeCommentCreation($parent, fromCurrentUser);\n    }\n    /**\n     * Generates a unique identifier for the form.\n     * @private\n     * @returns {String} - Returns a unique identifier\n     */\n\n  }, {\n    key: \"_getUID\",\n    value: function _getUID() {\n      return \"comments-\".concat(new Date().setUTCMilliseconds(), \"-\").concat(Math.floor(Math.random() * 10000000));\n    }\n    /**\n     * Initializes the comments for the given parent element.\n     * @private\n     * @param {jQuery} $parent The parent element to initialize.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_initializeComments\",\n    value: function _initializeComments($parent) {\n      var _this3 = this;\n\n      $(\".add-comment\", $parent).each(function (_i, el) {\n        var $add = $(el);\n        var $form = $(\"form\", $add);\n        var $opinionButtons = $(\".opinion-toggle .button\", $add);\n        var $text = $(\"textarea\", $form);\n        $opinionButtons.on(\"click.decidim-comments\", _this3._onToggleOpinion);\n        $text.on(\"input.decidim-comments\", _this3._onTextInput);\n        $(document).trigger(\"attach-mentions-element\", [$text.get(0)]);\n        $form.on(\"submit.decidim-comments\", function () {\n          var $submit = $(\"button[type='submit']\", $form);\n          $submit.attr(\"disabled\", \"disabled\");\n\n          _this3._stopPolling();\n        });\n\n        if ($text.length && $text.get(0) !== null) {\n          // Attach event to the DOM node, instead of the jQuery object\n          $text.get(0).addEventListener(\"emoji.added\", _this3._onTextInput);\n        }\n      });\n\n      this._pollComments();\n    }\n    /**\n     * Adds the given comment element to the given target element and\n     * initializes it.\n     * @private\n     * @param {jQuery} $target - The target element to add the comment to.\n     * @param {jQuery} $container - The comment container element to add.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_addComment\",\n    value: function _addComment($target, $container) {\n      var $comment = $(\".comment\", $container);\n\n      if ($comment.length < 1) {\n        // In case of a reply\n        $comment = $container;\n      }\n\n      this.lastCommentId = parseInt($comment.data(\"comment-id\"), 10);\n      $target.append($container);\n      $container.foundation();\n\n      this._initializeComments($container);\n\n      createCharacterCounter($(\".add-comment textarea\", $container));\n      $container.find('a[target=\"_blank\"]').each(function (_i, elem) {\n        var $link = $(elem);\n        $link.data(\"external-link\", new ExternalLink($link));\n      });\n      updateExternalDomainLinks($container);\n    }\n    /**\n     * Finalizes the new comment creation after the comment adding finishes\n     * successfully.\n     * @private\n     * @param {jQuery} $parent - The parent comment element to finalize.\n     * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n     *   herself was the author of the new comment.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_finalizeCommentCreation\",\n    value: function _finalizeCommentCreation($parent, fromCurrentUser) {\n      if (fromCurrentUser) {\n        var $add = $(\"> .add-comment\", $parent);\n        var $text = $(\"textarea\", $add);\n        var characterCounter = $text.data(\"remaining-characters-counter\");\n        $text.val(\"\");\n\n        if (characterCounter) {\n          characterCounter.updateStatus();\n        }\n\n        if (!$add.parent().is(\".comments\")) {\n          $add.addClass(\"hide\");\n        }\n      } // Restart the polling\n\n\n      this._pollComments();\n    }\n    /**\n     * Sets a timeout to poll new comments.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_pollComments\",\n    value: function _pollComments() {\n      var _this4 = this;\n\n      this._stopPolling();\n\n      this.pollTimeout = setTimeout(function () {\n        Rails.ajax({\n          url: _this4.commentsUrl,\n          type: \"GET\",\n          data: new URLSearchParams({\n            \"commentable_gid\": _this4.commentableGid,\n            \"root_depth\": _this4.rootDepth,\n            \"order\": _this4.order,\n            \"after\": _this4.lastCommentId\n          }),\n          success: _this4._pollComments()\n        });\n      }, this.pollingInterval);\n    }\n    /**\n     * Stops polling for new comments.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_stopPolling\",\n    value: function _stopPolling() {\n      if (this.pollTimeout) {\n        clearTimeout(this.pollTimeout);\n      }\n    }\n    /**\n     * Sets the loading comments element visible in the view.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_setLoading\",\n    value: function _setLoading() {\n      var $container = $(\"> .comments-container\", this.$element);\n      $(\"> .comments\", $container).addClass(\"hide\");\n      $(\"> .loading-comments\", $container).removeClass(\"hide\");\n    }\n    /**\n     * Event listener for the ordering links.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_onInitOrder\",\n    value: function _onInitOrder() {\n      this._stopPolling();\n\n      this._setLoading();\n    }\n    /**\n     * Event listener for the opinion toggle buttons.\n     * @private\n     * @param {Event} ev - The event object.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_onToggleOpinion\",\n    value: function _onToggleOpinion(ev) {\n      var $btn = $(ev.target);\n\n      if (!$btn.is(\".button\")) {\n        $btn = $btn.parents(\".button\");\n      }\n\n      var $add = $btn.closest(\".add-comment\");\n      var $form = $(\"form\", $add);\n      var $opinionButtons = $(\".opinion-toggle .button\", $add);\n      var $selectedState = $(\".opinion-toggle .selected-state\", $add);\n      var $alignment = $(\".alignment-input\", $form);\n      $opinionButtons.removeClass(\"is-active\").attr(\"aria-pressed\", \"false\");\n      $btn.addClass(\"is-active\").attr(\"aria-pressed\", \"true\");\n\n      if ($btn.is(\".opinion-toggle--ok\")) {\n        $alignment.val(1);\n      } else if ($btn.is(\".opinion-toggle--meh\")) {\n        $alignment.val(0);\n      } else if ($btn.is(\".opinion-toggle--ko\")) {\n        $alignment.val(-1);\n      } // Announce the selected state for the screen reader\n\n\n      $selectedState.text($btn.data(\"selected-label\"));\n    }\n    /**\n     * Event listener for the comment field text input.\n     * @private\n     * @param {Event} ev - The event object.\n     * @returns {Void} - Returns nothing\n     */\n\n  }, {\n    key: \"_onTextInput\",\n    value: function _onTextInput(ev) {\n      var $text = $(ev.target);\n      var $add = $text.closest(\".add-comment\");\n      var $form = $(\"form\", $add);\n      var $submit = $(\"button[type='submit']\", $form);\n\n      if ($text.val().length > 0) {\n        $submit.removeAttr(\"disabled\");\n      } else {\n        $submit.attr(\"disabled\", \"disabled\");\n      }\n    }\n  }]);\n\n  return CommentsComponent;\n}();\n\nexport { CommentsComponent as default };","map":{"version":3,"mappings":"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","names":["$","window","createCharacterCounter","ExternalLink","updateExternalDomainLinks","CommentsComponent","$element","config","_classCallCheck","commentableGid","commentsUrl","rootDepth","order","lastCommentId","pollingInterval","id","attr","_getUID","mounted","length","_initializeComments","on","_this","_onInitOrder","_stopPolling","off","each","_i","el","removeEventListener","_this2","_onTextInput","threadHtml","fromCurrentUser","$parent","$comment","$threads","_addComment","_finalizeCommentCreation","commentId","replyHtml","$replies","siblings","removeClass","Date","setUTCMilliseconds","Math","floor","random","$add","$form","$opinionButtons","$text","_this3","_onToggleOpinion","document","trigger","get","$submit","addEventListener","_pollComments","$target","$container","parseInt","data","append","foundation","find","elem","$link","characterCounter","val","updateStatus","parent","is","addClass","pollTimeout","setTimeout","Rails","ajax","url","_this4","type","URLSearchParams","success","clearTimeout","_setLoading","ev","$btn","target","parents","closest","$selectedState","$alignment","text","removeAttr"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-comments/app/packs/src/decidim/comments/comments.component.js"],"sourcesContent":["/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n\n/**\n * A plain Javascript component that handles the comments.\n *\n * @class\n * @augments Component\n */\n\n// This is necessary for testing purposes\nconst $ = window.$;\n\nimport { createCharacterCounter } from \"src/decidim/input_character_counter\"\nimport ExternalLink from \"src/decidim/external_link\"\nimport updateExternalDomainLinks from \"src/decidim/external_domain_warning\"\n\nexport default class CommentsComponent {\n  constructor($element, config) {\n    this.$element = $element;\n    this.commentableGid = config.commentableGid;\n    this.commentsUrl = config.commentsUrl;\n    this.rootDepth = config.rootDepth;\n    this.order = config.order;\n    this.lastCommentId = config.lastCommentId;\n    this.pollingInterval = config.pollingInterval || 15000;\n    this.id = this.$element.attr(\"id\") || this._getUID();\n    this.mounted = false;\n  }\n\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  mountComponent() {\n    if (this.$element.length > 0 && !this.mounted) {\n      this.mounted = true;\n      this._initializeComments(this.$element);\n\n      $(\".order-by__dropdown .is-submenu-item a\", this.$element).on(\"click.decidim-comments\", () => this._onInitOrder());\n    }\n  }\n\n  /**\n   * Handles the logic for unmounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  unmountComponent() {\n    if (this.mounted) {\n      this.mounted = false;\n      this._stopPolling();\n\n      $(\".add-comment .opinion-toggle .button\", this.$element).off(\"click.decidim-comments\");\n      $(\".add-comment textarea\", this.$element).off(\"input.decidim-comments\");\n      $(\".order-by__dropdown .is-submenu-item a\", this.$element).off(\"click.decidim-comments\");\n      $(\".add-comment form\", this.$element).off(\"submit.decidim-comments\");\n      $(\".add-comment textarea\", this.$element).each((_i, el) => el.removeEventListener(\"emoji.added\", this._onTextInput));\n    }\n  }\n\n  /**\n   * Adds a new thread to the comments section.\n   * @public\n   * @param {String} threadHtml - The HTML content for the thread.\n   * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n   *   herself was the author of the new thread. Defaults to false.\n   * @returns {Void} - Returns nothing\n   */\n  addThread(threadHtml, fromCurrentUser = false) {\n    const $parent = $(\".comments:first\", this.$element);\n    const $comment = $(threadHtml);\n    const $threads = $(\".comment-threads\", this.$element);\n    this._addComment($threads, $comment);\n    this._finalizeCommentCreation($parent, fromCurrentUser);\n  }\n\n  /**\n   * Adds a new reply to an existing comment.\n   * @public\n   * @param {Number} commentId - The ID of the comment for which to add the\n   *   reply to.\n   * @param {String} replyHtml - The HTML content for the reply.\n   * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n   *   herself was the author of the new reply. Defaults to false.\n   * @returns {Void} - Returns nothing\n   */\n  addReply(commentId, replyHtml, fromCurrentUser = false) {\n    const $parent = $(`#comment_${commentId}`);\n    const $comment = $(replyHtml);\n    const $replies = $(`#comment-${commentId}-replies`);\n    this._addComment($replies, $comment);\n    $replies.siblings(\".comment__additionalreply\").removeClass(\"hide\");\n    this._finalizeCommentCreation($parent, fromCurrentUser);\n  }\n\n  /**\n   * Generates a unique identifier for the form.\n   * @private\n   * @returns {String} - Returns a unique identifier\n   */\n  _getUID() {\n    return `comments-${new Date().setUTCMilliseconds()}-${Math.floor(Math.random() * 10000000)}`;\n  }\n\n  /**\n   * Initializes the comments for the given parent element.\n   * @private\n   * @param {jQuery} $parent The parent element to initialize.\n   * @returns {Void} - Returns nothing\n   */\n  _initializeComments($parent) {\n    $(\".add-comment\", $parent).each((_i, el) => {\n      const $add = $(el);\n      const $form = $(\"form\", $add);\n      const $opinionButtons = $(\".opinion-toggle .button\", $add);\n      const $text = $(\"textarea\", $form);\n\n      $opinionButtons.on(\"click.decidim-comments\", this._onToggleOpinion);\n      $text.on(\"input.decidim-comments\", this._onTextInput);\n\n      $(document).trigger(\"attach-mentions-element\", [$text.get(0)]);\n\n      $form.on(\"submit.decidim-comments\", () => {\n        const $submit = $(\"button[type='submit']\", $form);\n\n        $submit.attr(\"disabled\", \"disabled\");\n        this._stopPolling();\n      });\n\n      if ($text.length && $text.get(0) !== null) {\n        // Attach event to the DOM node, instead of the jQuery object\n        $text.get(0).addEventListener(\"emoji.added\", this._onTextInput);\n      }\n    });\n\n    this._pollComments();\n  }\n\n  /**\n   * Adds the given comment element to the given target element and\n   * initializes it.\n   * @private\n   * @param {jQuery} $target - The target element to add the comment to.\n   * @param {jQuery} $container - The comment container element to add.\n   * @returns {Void} - Returns nothing\n   */\n  _addComment($target, $container) {\n    let $comment = $(\".comment\", $container);\n    if ($comment.length < 1) {\n      // In case of a reply\n      $comment = $container;\n    }\n    this.lastCommentId = parseInt($comment.data(\"comment-id\"), 10);\n\n    $target.append($container);\n    $container.foundation();\n    this._initializeComments($container);\n    createCharacterCounter($(\".add-comment textarea\", $container));\n    $container.find('a[target=\"_blank\"]').each((_i, elem) => {\n      const $link = $(elem);\n      $link.data(\"external-link\", new ExternalLink($link));\n    });\n    updateExternalDomainLinks($container)\n  }\n\n  /**\n   * Finalizes the new comment creation after the comment adding finishes\n   * successfully.\n   * @private\n   * @param {jQuery} $parent - The parent comment element to finalize.\n   * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n   *   herself was the author of the new comment.\n   * @returns {Void} - Returns nothing\n   */\n  _finalizeCommentCreation($parent, fromCurrentUser) {\n    if (fromCurrentUser) {\n      const $add = $(\"> .add-comment\", $parent);\n      const $text = $(\"textarea\", $add);\n      const characterCounter = $text.data(\"remaining-characters-counter\");\n      $text.val(\"\");\n      if (characterCounter) {\n        characterCounter.updateStatus();\n      }\n      if (!$add.parent().is(\".comments\")) {\n        $add.addClass(\"hide\");\n      }\n    }\n\n    // Restart the polling\n    this._pollComments();\n  }\n\n  /**\n   * Sets a timeout to poll new comments.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _pollComments() {\n    this._stopPolling();\n\n    this.pollTimeout = setTimeout(() => {\n      Rails.ajax({\n        url: this.commentsUrl,\n        type: \"GET\",\n        data: new URLSearchParams({\n          \"commentable_gid\": this.commentableGid,\n          \"root_depth\": this.rootDepth,\n          \"order\": this.order,\n          \"after\": this.lastCommentId\n        }),\n        success: this._pollComments()\n      })\n    }, this.pollingInterval);\n  }\n\n  /**\n   * Stops polling for new comments.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _stopPolling() {\n    if (this.pollTimeout) {\n      clearTimeout(this.pollTimeout);\n    }\n  }\n\n  /**\n   * Sets the loading comments element visible in the view.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _setLoading() {\n    const $container = $(\"> .comments-container\", this.$element);\n    $(\"> .comments\", $container).addClass(\"hide\");\n    $(\"> .loading-comments\", $container).removeClass(\"hide\");\n  }\n\n  /**\n   * Event listener for the ordering links.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _onInitOrder() {\n    this._stopPolling();\n    this._setLoading();\n  }\n\n  /**\n   * Event listener for the opinion toggle buttons.\n   * @private\n   * @param {Event} ev - The event object.\n   * @returns {Void} - Returns nothing\n   */\n  _onToggleOpinion(ev) {\n    let $btn = $(ev.target);\n    if (!$btn.is(\".button\")) {\n      $btn = $btn.parents(\".button\");\n    }\n\n    const $add = $btn.closest(\".add-comment\");\n    const $form = $(\"form\", $add);\n    const $opinionButtons = $(\".opinion-toggle .button\", $add);\n    const $selectedState = $(\".opinion-toggle .selected-state\", $add);\n    const $alignment = $(\".alignment-input\", $form);\n\n    $opinionButtons.removeClass(\"is-active\").attr(\"aria-pressed\", \"false\");\n    $btn.addClass(\"is-active\").attr(\"aria-pressed\", \"true\");\n\n    if ($btn.is(\".opinion-toggle--ok\")) {\n      $alignment.val(1);\n    } else if ($btn.is(\".opinion-toggle--meh\")) {\n      $alignment.val(0);\n    } else if ($btn.is(\".opinion-toggle--ko\")) {\n      $alignment.val(-1);\n    }\n\n    // Announce the selected state for the screen reader\n    $selectedState.text($btn.data(\"selected-label\"));\n  }\n\n  /**\n   * Event listener for the comment field text input.\n   * @private\n   * @param {Event} ev - The event object.\n   * @returns {Void} - Returns nothing\n   */\n  _onTextInput(ev) {\n    const $text = $(ev.target);\n    const $add = $text.closest(\".add-comment\");\n    const $form = $(\"form\", $add);\n    const $submit = $(\"button[type='submit']\", $form);\n\n    if ($text.val().length > 0) {\n      $submit.removeAttr(\"disabled\");\n    } else {\n      $submit.attr(\"disabled\", \"disabled\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}