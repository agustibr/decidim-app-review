{"ast":null,"code":"/* eslint-disable require-jsdoc */\nvar Parchment = Quill[\"import\"](\"parchment\");\nvar Delta = Quill[\"import\"](\"delta\");\n\nvar getLineFormats = function getLineFormats(context) {\n  return Object.keys(context.format).reduce(function (formats, format) {\n    // See Parchment registry.ts => (1 << 3) | ((1 << 2) - 1) = 8 | 3 = 11\n    var blockScope = 11;\n\n    if (Parchment.query(format, blockScope) && !Array.isArray(context.format[format])) {\n      formats[format] = context.format[format];\n    }\n\n    return formats;\n  }, {});\n};\n\nvar continueFormats = function continueFormats(quill, context, lineFormats) {\n  Object.keys(context.format).forEach(function (name) {\n    if (typeof lineFormats[name] !== \"undefined\" && lineFormats[name] !== null) {\n      return;\n    }\n\n    if (Array.isArray(context.format[name])) {\n      return;\n    }\n\n    if (name === \"link\") {\n      return;\n    }\n\n    quill.format(name, context.format[name], Quill.sources.USER);\n  });\n};\n\nvar lineBreakHandler = function lineBreakHandler(quill, range, context) {\n  var _currentLeaf$next, _currentLeaf$next$dom, _nextLeaf$parent, _nextLeaf$parent$domN;\n\n  var currentLeaf = quill.getLeaf(range.index)[0];\n  var nextLeaf = quill.getLeaf(range.index + 1)[0];\n  var previousChar = quill.getText(range.index - 1, 1);\n  var formats = quill.getFormat(range.index);\n\n  if ((currentLeaf === null || currentLeaf === void 0 ? void 0 : (_currentLeaf$next = currentLeaf.next) === null || _currentLeaf$next === void 0 ? void 0 : (_currentLeaf$next$dom = _currentLeaf$next.domNode) === null || _currentLeaf$next$dom === void 0 ? void 0 : _currentLeaf$next$dom.tagName) === \"A\" || (nextLeaf === null || nextLeaf === void 0 ? void 0 : (_nextLeaf$parent = nextLeaf.parent) === null || _nextLeaf$parent === void 0 ? void 0 : (_nextLeaf$parent$domN = _nextLeaf$parent.domNode) === null || _nextLeaf$parent$domN === void 0 ? void 0 : _nextLeaf$parent$domN.tagName) === \"A\") {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n    quill.removeFormat(range.index, 1, Quill.sources.SILENT);\n  } else {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  }\n\n  if (nextLeaf === null) {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  } else if (context.offset === 1 && previousChar === \"\\n\") {\n    var delta = new Delta().retain(range.index).insert(\"\\n\");\n    quill.updateContents(delta, Quill.sources.USER);\n  }\n\n  Object.keys(formats).forEach(function (format) {\n    quill.format(format, context.format[format], Quill.sources.USER);\n  });\n  quill.setSelection(range.index + 1, Quill.sources.SILENT);\n  var lineFormats = getLineFormats(context);\n  continueFormats(quill, context, lineFormats);\n};\n\nexport default function addEnterBindings(quill) {\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: true\n  }, function (range, context) {\n    lineBreakHandler(quill, range, context);\n  }); // HAX: make our SHIFT+ENTER binding the second (first is added below) in order to override Quill defaults\n\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: false\n  }, function (range, context) {\n    var lineFormats = getLineFormats(context);\n    var previousChar = quill.getText(range.index - 1, 1);\n    var nextChar = quill.getText(range.index, 1);\n    var delta = new Delta().retain(range.index).insert(\"\\n\", lineFormats); // const length = context.prefix.length;\n\n    if (previousChar === \"\" || previousChar === \"\\n\") {\n      if (lineFormats.list && nextChar === \"\\n\") {\n        if (quill.getLength() - range.index > 2) {\n          var endFormatDelta = new Delta().retain(range.index - 1)[\"delete\"](1);\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n        } else {\n          // Delete empty list item and end the list\n          var _endFormatDelta = new Delta().retain(range.index - 1)[\"delete\"](1).retain(range.index).insert(\"\\n\");\n\n          quill.updateContents(_endFormatDelta, Quill.sources.USER);\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n      } else {\n        quill.updateContents(delta, Quill.sources.USER);\n\n        if (context.offset === 1 && previousChar === \"\\n\") {\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        } else {\n          quill.setSelection(range.index + 2, Quill.sources.SILENT);\n        }\n      }\n    } else {\n      quill.updateContents(delta, Quill.sources.USER);\n      quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    }\n\n    quill.focus();\n    continueFormats(quill, context, lineFormats);\n  }); // Replace the default enter handling because we have modified the break element\n\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  return;\n}","map":{"version":3,"mappings":"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","names":["Parchment","Quill","Delta","getLineFormats","context","Object","keys","format","reduce","formats","blockScope","query","Array","isArray","continueFormats","quill","lineFormats","forEach","name","sources","USER","lineBreakHandler","range","currentLeaf","getLeaf","index","nextLeaf","previousChar","getText","getFormat","next","domNode","tagName","parent","insertEmbed","removeFormat","SILENT","offset","delta","retain","insert","updateContents","setSelection","addEnterBindings","keyboard","addBinding","key","shiftKey","bindings","unshift","pop","nextChar","list","getLength","endFormatDelta","focus"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/editor/modified_enter.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nconst Parchment = Quill.import(\"parchment\")\nconst Delta = Quill.import(\"delta\");\n\nconst getLineFormats = (context) => {\n  return Object.keys(context.format).reduce(\n    (formats, format) => {\n      // See Parchment registry.ts => (1 << 3) | ((1 << 2) - 1) = 8 | 3 = 11\n      const blockScope = 11;\n      if (\n        Parchment.query(format, blockScope) &&\n        !Array.isArray(context.format[format])\n      ) {\n        formats[format] = context.format[format];\n      }\n      return formats;\n    },\n    {},\n  );\n}\n\nconst continueFormats = (quill, context, lineFormats) => {\n  Object.keys(context.format).forEach((name) => {\n    if (typeof lineFormats[name] !== \"undefined\" && lineFormats[name] !== null) {\n      return;\n    }\n    if (Array.isArray(context.format[name])) {\n      return;\n    }\n    if (name === \"link\") {\n      return;\n    }\n    quill.format(name, context.format[name], Quill.sources.USER);\n  });\n}\n\nconst lineBreakHandler = (quill, range, context) => {\n  const currentLeaf = quill.getLeaf(range.index)[0];\n  const nextLeaf = quill.getLeaf(range.index + 1)[0];\n  const previousChar = quill.getText(range.index - 1, 1);\n  const formats = quill.getFormat(range.index);\n\n  if (currentLeaf?.next?.domNode?.tagName === \"A\" || nextLeaf?.parent?.domNode?.tagName === \"A\") {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n    quill.removeFormat(range.index, 1, Quill.sources.SILENT)\n  } else {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  }\n\n  if (nextLeaf === null) {\n    quill.insertEmbed(range.index, \"break\", true, \"user\");\n  } else if (context.offset === 1 && previousChar === \"\\n\") {\n    const delta = new Delta().retain(range.index).insert(\"\\n\");\n    quill.updateContents(delta, Quill.sources.USER);\n  }\n\n  Object.keys(formats).forEach((format) => {\n    quill.format(format, context.format[format], Quill.sources.USER);\n  });\n  quill.setSelection(range.index + 1, Quill.sources.SILENT);\n\n  const lineFormats = getLineFormats(context);\n  continueFormats(quill, context, lineFormats);\n};\n\nexport default function addEnterBindings(quill) {\n  quill.keyboard.addBinding({\n    key: 13,\n    shiftKey: true\n  }, (range, context) => {\n    lineBreakHandler(quill, range, context);\n  });\n\n  // HAX: make our SHIFT+ENTER binding the second (first is added below) in order to override Quill defaults\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n\n  quill.keyboard.addBinding({ key: 13, shiftKey: false }, (range, context) => {\n    const lineFormats = getLineFormats(context);\n    const previousChar = quill.getText(range.index - 1, 1);\n    const nextChar = quill.getText(range.index, 1);\n    const delta = new Delta().retain(range.index).insert(\"\\n\", lineFormats);\n    // const length = context.prefix.length;\n    if (previousChar === \"\" || previousChar === \"\\n\") {\n      if (lineFormats.list && nextChar === \"\\n\") {\n        if (quill.getLength() - range.index > 2) {\n          const endFormatDelta = new Delta().retain(range.index - 1).delete(1);\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n        } else {\n          // Delete empty list item and end the list\n          const endFormatDelta = new Delta().retain(range.index - 1).delete(1).retain(range.index).insert(\"\\n\");\n          quill.updateContents(endFormatDelta, Quill.sources.USER);\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        }\n      } else {\n        quill.updateContents(delta, Quill.sources.USER);\n        if (context.offset === 1 && previousChar === \"\\n\") {\n          quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        } else {\n          quill.setSelection(range.index + 2, Quill.sources.SILENT);\n        }\n      }\n    } else {\n      quill.updateContents(delta, Quill.sources.USER);\n      quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    }\n    quill.focus();\n\n    continueFormats(quill, context, lineFormats);\n  });\n\n  // Replace the default enter handling because we have modified the break element\n  quill.keyboard.bindings[13].unshift(quill.keyboard.bindings[13].pop());\n  return;\n}\n\n"]},"metadata":{},"sourceType":"module"}