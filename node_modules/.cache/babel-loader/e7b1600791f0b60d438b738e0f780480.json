{"ast":null,"code":"/**\n * A method to enable the dialog mode for the given dialog(s).\n *\n * This should be called when the dialog is opened. It implements two things for\n * the dialog:\n * 1. It places the focus to the title element making sure the screen reader\n *    focuses in the correct position of the document. Otherwise some screen\n *    readers continue reading outside of the document.\n * 2. Document \"tab guards\" that force the keyboard focus within the modal when\n *    the user is using keyboard or keyboard emulating devices for browsing the\n *    document.\n *\n * The \"tab guards\" are added at the top and bottom of the document to keep the\n * user's focus within the dialog if they accidentally or intentionally place\n * the focus outside of the document, e.g. in different window or in the browser\n * address bar. They guard the focus on both sides of the document returning\n * focus back to the first or last focusable element within the dialog.\n *\n * @param {jQuery} $dialogs The jQuery element(s) to apply the mode for.\n * @return {Void} Nothing\n */\nexport default (function ($dialogs) {\n  $dialogs.each(function (_i, dialog) {\n    var $dialog = $(dialog);\n    var $container = $(\"body\");\n    var $title = $(\".reveal__title:first\", $dialog);\n\n    if ($title.length > 0) {\n      // Focus on the title to make the screen reader to start reading the\n      // content within the modal.\n      $title.attr(\"tabindex\", $title.attr(\"tabindex\") || -1);\n      $title.trigger(\"focus\");\n    } // Once the final modal closes, disable the focus guarding\n\n\n    $dialog.off(\"closed.zf.reveal.focusguard\").on(\"closed.zf.reveal.focusguard\", function () {\n      $dialog.off(\"closed.zf.reveal.focusguard\"); // After the last dialog is closed, the tab guards should be removed.\n      // This is done when the focus guard is disabled. If there is still a\n      // visible reveal item in the DOM, make that the currently \"guarded\"\n      // element. Note that there may be multiple dialogs open on top of each\n      // other at the same time.\n\n      var $visibleReveal = $(\".reveal:visible:last\", $container);\n\n      if ($visibleReveal.length > 0) {\n        window.focusGuard.trap($visibleReveal[0]);\n      } else {\n        window.focusGuard.disable();\n      }\n    });\n    window.focusGuard.trap(dialog);\n  });\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,UAACA,QAAD,EAAc;EAC3BA,QAAQ,CAACC,IAATD,CAAc,UAACE,EAAD,EAAKC,MAAL,EAAgB;IAC5B,IAAMC,OAAO,GAAGC,CAAC,CAACF,MAAD,CAAjB;IAEA,IAAMG,UAAU,GAAGD,CAAC,CAAC,MAAD,CAApB;IACA,IAAME,MAAM,GAAGF,CAAC,CAAC,sBAAD,EAAyBD,OAAzB,CAAhB;;IAEA,IAAIG,MAAM,CAACC,MAAPD,GAAgB,CAApB,EAAuB;MACrB;MACA;MACAA,MAAM,CAACE,IAAPF,CAAY,UAAZA,EAAwBA,MAAM,CAACE,IAAPF,CAAY,UAAZA,KAA2B,CAAC,CAApDA;MACAA,MAAM,CAACG,OAAPH,CAAe,OAAfA;IAV0B,EAa5B;;;IACAH,OAAO,CAACO,GAARP,CAAY,6BAAZA,EAA2CQ,EAA3CR,CAA8C,6BAA9CA,EAA6E,YAAM;MACjFA,OAAO,CAACO,GAARP,CAAY,6BAAZA,EADiF,CAGjF;MACA;MACA;MACA;MACA;;MACA,IAAMS,cAAc,GAAGR,CAAC,CAAC,sBAAD,EAAyBC,UAAzB,CAAxB;;MACA,IAAIO,cAAc,CAACL,MAAfK,GAAwB,CAA5B,EAA+B;QAC7BC,MAAM,CAACC,UAAPD,CAAkBE,IAAlBF,CAAuBD,cAAc,CAAC,CAAD,CAArCC;MADF,OAEO;QACLA,MAAM,CAACC,UAAPD,CAAkBG,OAAlBH;MACD;IAbH;IAgBAA,MAAM,CAACC,UAAPD,CAAkBE,IAAlBF,CAAuBX,MAAvBW;EA9BF;AADF","names":["$dialogs","each","_i","dialog","$dialog","$","$container","$title","length","attr","trigger","off","on","$visibleReveal","window","focusGuard","trap","disable"],"sources":["/home/agustibr/.asdf/installs/ruby/3.0.2/lib/ruby/gems/3.0.0/bundler/gems/decidim-a25b5c74f78d/decidim-core/app/packs/src/decidim/dialog_mode.js"],"sourcesContent":["/**\n * A method to enable the dialog mode for the given dialog(s).\n *\n * This should be called when the dialog is opened. It implements two things for\n * the dialog:\n * 1. It places the focus to the title element making sure the screen reader\n *    focuses in the correct position of the document. Otherwise some screen\n *    readers continue reading outside of the document.\n * 2. Document \"tab guards\" that force the keyboard focus within the modal when\n *    the user is using keyboard or keyboard emulating devices for browsing the\n *    document.\n *\n * The \"tab guards\" are added at the top and bottom of the document to keep the\n * user's focus within the dialog if they accidentally or intentionally place\n * the focus outside of the document, e.g. in different window or in the browser\n * address bar. They guard the focus on both sides of the document returning\n * focus back to the first or last focusable element within the dialog.\n *\n * @param {jQuery} $dialogs The jQuery element(s) to apply the mode for.\n * @return {Void} Nothing\n */\nexport default ($dialogs) => {\n  $dialogs.each((_i, dialog) => {\n    const $dialog = $(dialog);\n\n    const $container = $(\"body\");\n    const $title = $(\".reveal__title:first\", $dialog);\n\n    if ($title.length > 0) {\n      // Focus on the title to make the screen reader to start reading the\n      // content within the modal.\n      $title.attr(\"tabindex\", $title.attr(\"tabindex\") || -1);\n      $title.trigger(\"focus\");\n    }\n\n    // Once the final modal closes, disable the focus guarding\n    $dialog.off(\"closed.zf.reveal.focusguard\").on(\"closed.zf.reveal.focusguard\", () => {\n      $dialog.off(\"closed.zf.reveal.focusguard\");\n\n      // After the last dialog is closed, the tab guards should be removed.\n      // This is done when the focus guard is disabled. If there is still a\n      // visible reveal item in the DOM, make that the currently \"guarded\"\n      // element. Note that there may be multiple dialogs open on top of each\n      // other at the same time.\n      const $visibleReveal = $(\".reveal:visible:last\", $container);\n      if ($visibleReveal.length > 0) {\n        window.focusGuard.trap($visibleReveal[0]);\n      } else {\n        window.focusGuard.disable();\n      }\n    });\n\n    window.focusGuard.trap(dialog);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}